var Ge=Object.defineProperty,We=Object.defineProperties;var Xe=Object.getOwnPropertyDescriptors;var M=Object.getOwnPropertySymbols;var ie=Object.prototype.hasOwnProperty,de=Object.prototype.propertyIsEnumerable;var V=(e,n,r)=>n in e?Ge(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,d=(e,n)=>{for(var r in n||(n={}))ie.call(n,r)&&V(e,r,n[r]);if(M)for(var r of M(n))de.call(n,r)&&V(e,r,n[r]);return e},b=(e,n)=>We(e,Xe(n));var v=(e,n)=>{var r={};for(var a in e)ie.call(e,a)&&n.indexOf(a)<0&&(r[a]=e[a]);if(e!=null&&M)for(var a of M(e))n.indexOf(a)<0&&de.call(e,a)&&(r[a]=e[a]);return r};var me=(e,n,r)=>(V(e,typeof n!="symbol"?n+"":n,r),r);import{n as g,B as y,R as t,D as fe,T as J,S as G,r as E,u as U,l as Ze,a as B,b as F,c as W,P as he,L as x,d as ye,e as be,F as h,f as Ie,I,g as Y,h as $,C as et,i as tt,j as X,M as C,k as Z,m as H,o as D,p as nt,q as rt,s as Fe,t as A,N as ve,v as at,w as ot,x as st,Q as lt,y as ct,z as ut,A as it}from"./vendor.c8e17def.js";const dt=function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))a(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const l of s.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&a(l)}).observe(document,{childList:!0,subtree:!0});function r(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerpolicy&&(s.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?s.credentials="include":o.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(o){if(o.ep)return;o.ep=!0;const s=r(o);fetch(o.href,s)}};dt();const P=g.div`
display: flex;
align-items: center;
justify-content: ${e=>e.between?"space-between":void 0};
> * {
  margin-top: 0 !important;
  margin-bottom: ${e=>typeof e.marginBottom=="number"?e.marginBottom+"rem":0} ;
  margin-right: ${e=>typeof e.gap=="number"?e.gap+"rem":e.gap?"2rem":"0"}
}`,Ce=g.div`
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;

`,mt=()=>t.createElement(Ce,null,t.createElement(G,{size:"large"})),ke=({error:e})=>t.createElement(Ce,null,t.createElement(K,{error:e}),t.createElement(fe,null)),xe=g(y)`
  padding: 0px;
`,Et=e=>e==null?void 0:e.message,K=function({error:e}){return Et(e)?t.createElement(J.Text,{type:"danger"},e.message):null},Be=g.div`
  padding: 3.2rem;
  width: 100%;
  display: flex;
  flex-direction: column; 
`,ee="__auth_provider_token__",pt=()=>window.localStorage.getItem(ee),Pe=({user:e})=>(window.localStorage.setItem(ee,e.token||""),e),we="http://localhost:3001",gt=e=>fetch(`${we}/login`,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(e)}).then(async n=>n.ok?Pe(await n.json()):Promise.reject(await n.json())),ft=e=>fetch(`${we}/register`,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(e)}).then(async n=>n.ok?Pe(await n.json()):Promise.reject(await n.json())),De=async()=>{window.localStorage.removeItem(ee)},ht=e=>e==null||e==="",te=e=>{const n=d({},e);return Object.keys(n).forEach(r=>{const a=n[r];ht(a)&&delete n[r]}),n},yt=e=>{E.exports.useEffect(()=>{e()},[])};function Ae(e,n){const[r,a]=E.exports.useState(e);return E.exports.useEffect(()=>{const o=setTimeout(()=>a(e),n);return()=>{clearTimeout(o)}},[e,n]),r}function ne(e,n=!0){const r=E.exports.useRef(document.title).current;E.exports.useEffect(()=>{document.title=e},[e]),E.exports.useEffect(()=>()=>{document.title=r},[r,n])}const bt=()=>{const e=E.exports.useRef(!1);return E.exports.useEffect(()=>(e.current=!0,()=>{e.current=!1}),[]),e},It=(e,n)=>{const r=Object.entries(e).filter(([a])=>n.includes(a));return Object.fromEntries(r)},Ft={error:null,data:null,stat:"idle"},vt=e=>{const n=bt();return E.exports.useCallback((...r)=>n.current?e(...r):void 0,[n,e])},re=e=>{const[n,r]=E.exports.useReducer((i,m)=>d(d({},i),m),d(d({},Ft),e)),[a,o]=E.exports.useState(()=>()=>{}),s=vt(r),l=E.exports.useCallback(i=>{s({error:null,data:i,stat:"success"})},[s]),c=E.exports.useCallback(i=>{s({error:i,stat:"error",data:null})},[s]),u=E.exports.useCallback((i,m)=>{if(!i||!i.then)throw new Error("\u8BF7\u4F20\u5165 Promise \u7C7B\u578B\u6570\u636E ");return o(()=>()=>{m!=null&&m.retry&&u(m==null?void 0:m.retry(),m)}),s({stat:"loading",data:null,error:null}),i.then(p=>(l(p),p)).catch(p=>(c(p),Promise.reject(p)))},[l,c,s]);return d({isIdle:n.stat==="idle",isLoading:n.stat==="loading",isError:n.stat==="error",isSuccess:n.stat==="success",run:u,setData:l,setError:c,retry:a},n)},Ct=async()=>{let e=null;const n=pt();return n&&(e=(await Te("me",{token:n})).user),e},ae=t.createContext(void 0);ae.displayName="AuthContext";const kt=({children:e})=>{const n=U(),{isLoading:r,isError:a,run:o,isIdle:s,data:l,setData:c,error:u}=re();if(yt(()=>{o(Ct())}),s||r)return t.createElement(mt,null);if(a)return t.createElement(ke,{error:u});const i=k=>gt(k).then(S=>{c(S)}),m=k=>ft(k).then(S=>c(S)),p=()=>De().then(()=>{c(null),n.clear()});return t.createElement(ae.Provider,{value:{user:l,login:i,register:m,logout:p}},e)},O=()=>{const e=t.useContext(ae);if(!e)throw new Error("useAuth\u5FC5\u987B\u518DAuthProvider \u4E2D\u4F7F\u7528");return e},xt="http://localhost:3001",Te=async(e,s={})=>{var l=s,{data:n,token:r,headers:a}=l,o=v(l,["data","token","headers"]);const c=d({method:"GET",headers:{Authorization:r?`Bearer ${r}`:"","Content-Type":"application/json"}},o);return c.method.toUpperCase()==="GET"?e+=`?${Ze.stringify(n)}`:c.body=JSON.stringify(n||{}),window.fetch(`${xt}/${e}`,c).then(async u=>{if(u.status===401)return await De(),window.location.reload(),Promise.reject({message:"\u8BF7\u91CD\u65B0\u767B\u5F55"});const i=await u.json();return u!=null&&u.ok?i:Promise.reject(i)})},f=()=>{const{user:e}=O();return(...[n,r])=>Te(n,b(d({},r),{token:e==null?void 0:e.token}))},je=({fromId:e,type:n,referenceId:r,list:a})=>{const o=[...a],s=o.findIndex(u=>u.id===e);if(!r)return Ee([...o],s,o.length-1);const l=o.findIndex(u=>u.id===r);return(n==="after"?Ee:Bt)([...o],s,l)},Bt=(e,n,r)=>{const a=e[r],o=e.splice(n,1)[0],s=e.indexOf(a);return e.splice(s,0,o),e},Ee=(e,n,r)=>{const a=e[r],o=e.splice(n,1)[0],s=e.indexOf(a);return e.splice(s+1,0,o),e},R=(e,n)=>{const r=U();return{onSuccess:()=>r.invalidateQueries(e),async onMutate(a){const o=r.getQueryData(e);return r.setQueryData(e,s=>n(a,s)),{previousItems:o}},onError(a,o,s){r.setQueryData(e,s.previousItems)}}},_=e=>R(e,(n,r)=>(r==null?void 0:r.filter(a=>a.id!==n.id))||[]),Se=e=>R(e,(n,r)=>(r==null?void 0:r.map(a=>a.id===n.id?d(d({},a),n):a))||[]),z=e=>R(e,(n,r)=>r?[...r,n]:[]),Pt=e=>R(e,(n,r)=>je(d({list:r},n))),wt=e=>R(e,(n,r)=>je(d({list:r},n)).map(o=>o.id===n.fromId?b(d({},o),{kanbanId:n.toKanbanId}):o)),Le=e=>{const n=f();return B(["projects",te(e)],()=>n("projects",{data:e}))},Oe=e=>{const n=f();return F(r=>n(`projects/${r.id}`,{method:"PATCH",data:r}),Se(e))},Dt=e=>{const n=f();return F(r=>n("projects",{data:r,method:"POST"}),z(e))},At=e=>{const n=f();return F(({id:r})=>n(`projects/${r}`,{method:"DELETE"}),_(e))},Re=e=>{const n=f();return B(["project",{id:e}],()=>n(`projects/${e}`),{enabled:Boolean(e)})},T=e=>{const[n]=W(),r=oe(),[a]=E.exports.useState(e);return[E.exports.useMemo(()=>It(Object.fromEntries(n),a),[n,a]),o=>r(o)]},oe=()=>{const[e,n]=W();return r=>{const a=te(d(d({},Object.fromEntries(e)),r));return n(a)}},L=function(){const[{projectCreate:e},n]=T(["projectCreate"]),[{editingProjectId:r},a]=T(["editingProjectId"]);W();const{data:o,isLoading:s}=Re(r),l=oe(),c=()=>{n({projectCreate:!0})},u=()=>{l({projectCreate:"",editingProjectId:""})},i=m=>a({editingProjectId:m});return{projectModalOpen:e==="true"||Boolean(r),open:c,close:u,startEdit:i,editingProject:o,isLoading:s}},Tt=()=>{const[e,n]=T(["name","personId"]);return[E.exports.useMemo(()=>b(d({},e),{personId:e.personId||void 0}),[e]),n]},q=()=>{const[e]=Tt();return["projects",e]};function jt(){const{data:e,isLoading:n,refetch:r}=Le(),a=e==null?void 0:e.filter(c=>c.pin),{open:o}=L(),s=function(){return t.createElement(l,null,t.createElement(J.Text,{type:"secondary"},"\u6536\u85CF\u9879\u76EE"),t.createElement(x,null,a==null?void 0:a.map(c=>t.createElement(x.Item,{key:c.id},t.createElement(x.Item.Meta,{title:c.name})))),t.createElement(ye,null),t.createElement(xe,{type:"link",onClick:()=>o()},"\u521B\u5EFA\u9879\u76EE"))},l=g.div`
    min-width: 15rem;
  `;return t.createElement(he,{placement:"bottom",onVisibleChange:()=>r(),content:s},t.createElement("h2",null,"\u9879\u76EE"))}const se=function(e){const n=f();return B(["users",e],()=>n("users",{data:te(e||{})}))};function St(){const{data:e,isLoading:n,refetch:r}=se(),a=function(){return t.createElement(o,null,t.createElement(J.Text,{type:"secondary"},"\u7EC4\u5458"),t.createElement(x,null,e==null?void 0:e.map(s=>t.createElement(x.Item,{key:s.id},t.createElement(x.Item.Meta,{title:s.name})))))},o=g.div`
    min-width: 15rem;
  `;return t.createElement(he,{placement:"bottom",onVisibleChange:()=>r(),content:a},t.createElement("h2",null,"\u7EC4\u5458"))}const Lt=e=>{const n=f();return B(["epics",e],()=>n("epics",{data:e}))},Ot=e=>{const n=f();return U(),F(r=>n("epics",{data:r,method:"POST"}),z(e))},Rt=e=>{const n=f();return F(({id:r})=>n(`epics/${r}`,{method:"DELETE"}),_(e))},Q=e=>{const n=f(),r=b(d({},e),{name:Ae(e==null?void 0:e.name,200)});return B(["tasks",r],()=>n("tasks",{data:r}))},Mt=e=>{const n=f();return B(["task",{id:e}],()=>n(`tasks/${e}`),{enabled:Boolean(e)})},$t=e=>{const n=f();return F(r=>n(`tasks/${r.id}`,{data:r,method:"PATCH"}),Se(e))},Nt=e=>{const n=f();return F(({id:r})=>n(`tasks/${r}`,{method:"DELETE"}),_(e))},Ut=e=>{const n=f();return F(r=>n("tasks/reorder",{data:r,method:"POST"}),wt(e))},w=()=>{var r;const{pathname:e}=be(),n=(r=e.match(/projects\/(\d+)/))==null?void 0:r[1];return Number(n)},Me=()=>Re(w()),le=()=>({projectId:w()}),ce=()=>["kanbans",le()],j=()=>{const e=w(),[n,r]=T(["name","typeId","processorId","tagId"]);return E.exports.useMemo(()=>({projectId:e,typeId:Number(n.typeId)||void 0,processorId:Number(n.processorId)||void 0,tagId:Number(n.tagId)||void 0,name:n.name||void 0}),[e,n])},N=()=>["tasks",j()],$e=()=>{const[{editingTaskId:e},n]=T(["editingTaskId"]),{data:r,isLoading:a}=Mt(Number(e)),o=E.exports.useCallback(l=>{console.log("test"),n({editingTaskId:l})},[n]),s=E.exports.useCallback(()=>{n({editingTaskId:""})},[n]);return{editingTask:r,editingTaskId:e,startEdit:o,close:s,isLoading:a}},Ne=()=>({projectId:w()}),Ue=()=>["epics",Ne()],Kt=e=>{const{mutate:n,isLoading:r}=Ot(Ue()),[a]=h.useForm(),o=w(),s=async l=>{console.log(l),await n(b(d({},l),{projectId:o})),e.onClose()};return E.exports.useEffect(()=>{a.resetFields()},[a,e.visible]),t.createElement(Ie,{forceRender:!0,destroyOnClose:!0,width:"100%",onClose:e.onClose,visible:e.visible},t.createElement(_t,null,t.createElement(h,{onFinish:s,form:a,layout:"vertical",style:{width:"40rem",position:"absolute"}},t.createElement(h.Item,{name:"name",label:"\u540D\u79F0",rules:[{required:!0,message:"\u8BF7\u8F93\u5165"}]},t.createElement(I,{placeholder:"\u8BF7\u8F93\u5165\u4EFB\u52A1 \u540D\u79F0"})),t.createElement(y,{style:{position:"absolute",right:"0"},loading:r,type:"primary",htmlType:"submit"},"\u63D0\u4EA4"))))},_t=g.div`
  height: 80vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
`;function zt(){const{data:e}=Me(),{data:n}=Lt(Ne()),{mutate:r}=Rt(Ue()),{data:a}=Q({projectId:e==null?void 0:e.id}),[o,s]=E.exports.useState(!1);return t.createElement(Be,null,t.createElement(P,{between:!0},t.createElement("h1",null,e==null?void 0:e.name),t.createElement(y,{onClick:()=>s(!0)}," \u65B0\u589E")),t.createElement(x,{dataSource:n,itemLayout:"vertical",renderItem:l=>t.createElement(x.Item,null,t.createElement(x.Item.Meta,{title:t.createElement(P,{between:!0},t.createElement("span",null,l.name),t.createElement(y,{type:"link",onClick:()=>r({id:l.id})}," \u5220\u9664")),description:t.createElement("div",null,t.createElement("div",null,"\u5F00\u59CB\u65F6\u95F4\uFF1A",Y(l.start).format("YYYY-MM-DD")),t.createElement("div",null,"\u7ED3\u675F\u65F6\u95F4\uFF1A",Y(l.end).format("YYYY-MM-DD")))}),t.createElement("div",null,a==null?void 0:a.filter(c=>c.epicId===l.id).map(c=>t.createElement($,{style:{marginRight:"2rem"},to:`/projects/${e==null?void 0:e.id}/kanban?editingTaskId=${c.id}`,key:c.id},c.name))))}),t.createElement(Kt,{onClose:()=>s(!1),visible:o}))}const Ke=r=>{var a=r,{children:e}=a,n=v(a,["children"]);return t.createElement(et,d({},n),o=>t.isValidElement(e)?t.cloneElement(e,b(d({},o.droppableProps),{ref:o.innerRef,provided:o})):t.createElement("div",null))},_e=t.forwardRef((a,r)=>{var o=a,{children:e}=o,n=v(o,["children"]);var s;return t.createElement("div",d({ref:r},n),e,(s=n.provided)==null?void 0:s.placeholder)}),ze=r=>{var a=r,{children:e}=a,n=v(a,["children"]);return t.createElement(tt,d({},n),o=>t.isValidElement(e)?t.cloneElement(e,b(d(d({},o.draggableProps),o.dragHandleProps),{ref:o.innerRef})):t.createElement("div",null))},Qe=e=>{const n=f();return B(["kanbans",e],()=>n("kanbans",{data:e}))},Qt=e=>{const n=f();return U(),F(r=>n("kanbans",{data:r,method:"POST"}),z(e))},Vt=e=>{const n=f();return F(({id:r})=>n(`kanbans/${r}`,{method:"DELETE"}),_(e))},Yt=e=>{const n=f();return F(r=>n("kanbans/reorder",{data:r,method:"POST"}),Pt(e))},Ht=e=>{const n=f();return F(r=>n("tasks",{data:r,method:"POST"}),z(e))},Ve=()=>{const e=f();return B(["tasksType"],()=>e("taskTypes"))};var qt="/assets/task.e5ad6607.svg",Jt="/assets/bug.5ca02341.svg";function Gt({kanbanId:e}){const[n,r]=E.exports.useState(""),{mutateAsync:a}=Ht(N()),o=w(),[s,l]=E.exports.useState(!1),c=async()=>{await a({name:n,kanbanId:e,projectId:o}),r(""),l(!1)},u=()=>l(i=>!i);return E.exports.useEffect(()=>{s||r("")},[s]),s?t.createElement(X,null,t.createElement(I,{onBlur:u,placeholder:"\u9700\u8981\u505A\u4E9B\u4EC0\u4E48",autoFocus:!0,onPressEnter:c,value:n,onChange:i=>r(i.target.value)})):t.createElement("div",{onClick:u},"+\u521B\u5EFA\u4E8B\u52A1")}const Wt=({name:e,keyword:n})=>{if(!n)return t.createElement(t.Fragment,null,e);const r=e.split(n);return t.createElement(t.Fragment,null,r.map((a,o)=>t.createElement("span",{key:o},a,o===r.length-1?null:t.createElement("span",{style:{color:"#257AFD"}},n))))},Xt=({id:e})=>{const{data:n}=Ve(),r=n==null?void 0:n.find(a=>a.id===e);return r!=null&&r.name?t.createElement("img",{alt:"task-icon",src:r.name==="task"?qt:Jt}):null},Zt=({task:e})=>{const{startEdit:n}=$e(),{name:r}=j();return t.createElement(X,{onClick:()=>{n(e.id)},style:{marginBottom:"0.5rem",cursor:"pointer "},key:e.id},t.createElement("p",null," ",t.createElement(Wt,{name:e.name,keyword:r||""})),t.createElement(Xt,{id:e.typeId}))},en=t.forwardRef((a,r)=>{var o=a,{kanban:e}=o,n=v(o,["kanban"]);const{data:s}=Q(j()),l=s==null?void 0:s.filter(c=>c.kanbanId===e.id);return t.createElement(Ye,b(d({},n),{ref:r}),t.createElement(P,{between:!0},t.createElement("h3",null,e.name),t.createElement(tn,{kanban:e,key:e.id})),t.createElement(nn,null,t.createElement(Ke,{type:"ROW",direction:"vertical",droppableId:String(e.id)},t.createElement(_e,{style:{minHeight:"1rem"}},l==null?void 0:l.map((c,u)=>t.createElement(ze,{key:c.id,index:u,draggableId:"task"+c.id},t.createElement("div",null,t.createElement(Zt,{key:c.id,task:c})))))),t.createElement(Gt,{kanbanId:e.id})))}),tn=({kanban:e})=>{const{mutateAsync:n}=Vt(ce()),r=()=>{H.confirm({okText:"\u786E\u5B9A",cancelText:"\u53D6\u6D88",title:"\u786E\u5B9A\u5220\u9664\u770B\u677F\u5417",onOk(){return n({id:e.id})}})},a=t.createElement(C,null,t.createElement(C.Item,null,t.createElement(y,{onClick:r,type:"link"},"\u5220\u9664")));return t.createElement(Z,{overlay:a},t.createElement(y,{type:"link"},"..."))},Ye=g.div`
  min-width: 27rem;
  border-radius: 6px;
  background-color: rgb(244, 245, 247);
  display: flex;
  flex-direction: column;
  padding: 0.7rem 0.7rem 1rem;
  margin-right: 1.5rem;
`,nn=g.div`
  overflow: scroll;
  /* overflow: hidden; */
  /* flex: 1; */
  /* height: 50%; */
  ::-webkit-scrollbar {
    display: none;
  }
`,rn=()=>{const[e,n]=E.exports.useState(""),r=w(),{mutateAsync:a}=Qt(ce()),o=async()=>{await a({name:e,projectId:r}),n("")};return t.createElement(Ye,null,t.createElement(I,{size:"large",placeholder:"\u65B0\u5EFA\u770B\u677F\u540D\u79F0",onPressEnter:o,value:e,onChange:s=>n(s.target.value)}))},He=e=>{const l=e,{value:n,onChange:r,defaultOptionName:a,options:o}=l,s=v(l,["value","onChange","defaultOptionName","options"]);return t.createElement(D,d({value:o!=null&&o.length?pe(n):0,onChange:c=>r==null?void 0:r(pe(c)||void 0)},s),a?t.createElement(D.Option,{value:0},a):null,o==null?void 0:o.map(c=>t.createElement(D.Option,{key:c.id,value:c.id},c.name)))},pe=e=>isNaN(Number(e))?0:Number(e),qe=e=>{const{data:n}=Ve();return t.createElement(He,d({options:n||[]},e))},ue=e=>{const{data:n}=se();return t.createElement(He,d({options:n||[]},e))},an=()=>{const e=j(),n=oe(),r=()=>{n({typeId:void 0,processorId:void 0,tagId:void 0,name:void 0})};return t.createElement(P,{marginBottom:2,gap:!0},t.createElement(I,{style:{width:"20rem"},placeholder:"\u9879\u76EE\u540D",value:e.name,onChange:a=>{n({name:a.target.value})}}),t.createElement(ue,{defaultOptionName:"\u7ECF\u529E\u4EBA",value:e.processorId,onChange:a=>{n({processorId:a})}}),t.createElement(qe,{defaultOptionName:"\u7C7B\u578B",value:e.typeId,onChange:a=>n({typeId:a})}),t.createElement(y,{onClick:()=>r()},"\u6E05\u9664\u7B5B\u9009\u5668"))},on={labelCol:{span:8},wrapperCol:{span:16}};function sn(){const[e]=nt.useForm(),{editingTaskId:n,editingTask:r,close:a}=$e(),{mutateAsync:o,isLoading:s}=$t(N()),l=()=>{a(),e.resetFields()},c=async()=>{await o(d(d({},r),e.getFieldsValue())),a()},{mutateAsync:u}=Nt(N());E.exports.useEffect(()=>{e.setFieldsValue(r)},[e,r]);const i=()=>{a(),H.confirm({title:"\u786E\u5B9A\u5220\u9664\u4EFB\u52A1\u5417",okText:"\u786E\u5B9A",cancelText:"\u53D6\u6D88",onOk:()=>u({id:Number(n)})})};return t.createElement(H,{forceRender:!0,onCancel:l,onOk:c,okText:"\u786E\u5B9A",cancelText:"\u53D6\u6D88",confirmLoading:s,title:"\u7F16\u8F91\u4EFB\u52A1",visible:!!n},t.createElement(h,b(d({form:e},on),{initialValues:r}),t.createElement(h.Item,{name:"name",label:"\u4EFB\u52A1\u540D"},t.createElement(I,null)),t.createElement(h.Item,{label:"\u7ECF\u529E\u4EBA",name:"processorId"},t.createElement(ue,{defaultOptionName:"\u7ECF\u529E\u4EBA"})),t.createElement(h.Item,{label:"\u7C7B\u578B",name:"typeId"},t.createElement(qe,null)),t.createElement("div",{style:{textAlign:"right"}},t.createElement(y,{type:"link",onClick:i},"\u5220\u9664"))))}function ln(){ne("\u770B\u677F\u5217\u8868");const{data:e}=Me(),{data:n,isLoading:r}=Qe(le()),{isLoading:a}=Q(j()),o=a||r,s=cn();return t.createElement(rt,{onDragEnd:s},t.createElement(Be,null,t.createElement("h1",null,e==null?void 0:e.name,"\u770B\u677F"),t.createElement(an,null),o?t.createElement(G,{size:"large"}):t.createElement(un,null,t.createElement(Ke,{type:"COLUMN",direction:"horizontal",droppableId:"kanban"},t.createElement(_e,{style:{display:"flex"}},n==null?void 0:n.map((l,c)=>t.createElement(ze,{key:l.id,draggableId:"kanban"+l.id,index:c},t.createElement(en,{kanban:l,key:l.id}))))),t.createElement(rn,null)),t.createElement(sn,null)))}const cn=()=>{const{data:e}=Qe(le()),{mutate:n}=Yt(ce()),{data:r=[]}=Q(j()),{mutate:a}=Ut(N());return E.exports.useCallback(({source:o,destination:s,type:l})=>{if(console.log(o,s,l),!!s){if(l==="COLUMN"){const c=e==null?void 0:e[o.index].id,u=e==null?void 0:e[s.index].id;if(!c||!u||c===u)return;const i=s.index>o.index?"after":"before";n({fromId:c,referenceId:u,type:i})}if(l==="ROW"){const c=+o.droppableId,u=+s.droppableId,i=r.filter(p=>p.kanbanId===c)[o.index],m=r.filter(p=>p.kanbanId===u)[s.index];if((i==null?void 0:i.id)===(m==null?void 0:m.id)&&c===u)return;a({fromId:i==null?void 0:i.id,referenceId:m==null?void 0:m.id,fromKanbanId:c,toKanbanId:u,type:c===u&&s.index>o.index?"after":"before"})}}},[e,n,r,a])},un=g.div`
  display: flex;
  /* overflow: scroll; */
  flex: 1;
  overflow-x: scroll;

`,dn=()=>{const e=be().pathname.split("/");return e[e.length-1]};function mn(){const e=dn();return t.createElement(gn,null,t.createElement(En,null,t.createElement(C,{mode:"inline",selectedKeys:[e]},t.createElement(C.Item,{key:"kanban"},t.createElement($,{to:"kanban"},"\u770B\u677F")),t.createElement(C.Item,{key:"epic"},t.createElement($,{to:"epic"},"\u4EFB\u52A1\u7EC4")))),t.createElement(pn,null,t.createElement(Fe,null,t.createElement(A,{path:"/kanban",element:t.createElement(ln,null)}),t.createElement(A,{path:"/epic",element:t.createElement(zt,null)}),t.createElement(A,{path:"/*",element:t.createElement(ve,{to:"kanban",replace:!0})}))))}const En=g.aside`
  background-color: rgb(244, 245, 247);
  display: flex;
`,pn=g.div`
  box-shadow: -5px 0 5px -5px rgba(0, 0, 0, 0.1);
  display: flex;
  overflow: hidden;
`,gn=g.div`
  display: grid;
  grid-template-columns: 16rem 1fr;
  width: 100%;
`,ge=a=>{var o=a,{checked:e,onCheckedChange:n}=o,r=v(o,["checked","onCheckedChange"]);return t.createElement(at,d({count:1,value:e?1:0,onChange:s=>n==null?void 0:n(!!s)},r))};function fn(r){var a=r,{users:e}=a,n=v(a,["users"]);const{mutate:o}=Oe(q()),{startEdit:s}=L(),l=m=>p=>{o({id:m,pin:p})},{mutate:c}=At(q()),u=m=>()=>s(m),i=m=>()=>c(String(m));return L(),t.createElement(ot,b(d({},n),{columns:[{title:t.createElement(ge,{checked:!0,disabled:!0}),render(m,p){return t.createElement(ge,{checked:p.pin,onCheckedChange:l(p.id)})}},{title:"\u540D\u79F0",sorter:(m,p)=>m.name.localeCompare(p.name),render(m,p){return t.createElement($,{to:String(p.id)},p.name)}},{title:"\u90E8\u95E8",dataIndex:"organization"},{title:"\u521B\u5EFA\u65F6\u95F4",render(m,p){return t.createElement("span",null,p.created?Y(p.created).format("YYYY-MM-DD"):"\u65E0")}},{title:"\u8D1F\u8D23\u4EBA",render(m,p){var k;return t.createElement("span",null,((k=e.find(S=>S.id===p.personId))==null?void 0:k.name)||"\u672A\u77E5")}},{render(m,p){return t.createElement(Z,{overlay:t.createElement(C,null,t.createElement(C.Item,{key:"edit",onClick:u(p.id)},"\u7F16\u8F91"),t.createElement(C.Item,{key:"delete",onClick:i(p.id)},"\u5220\u9664"))},t.createElement(xe,{type:"link"},"..."))}}]}))}function hn({param:e,setParam:n,users:r}){f();let[a,o]=E.exports.useState("");E.exports.useEffect(()=>{var l;r.length>0&&o((l=r.find(c=>c.id==e.personId))==null?void 0:l.name)},[r]);const s=E.exports.useMemo(()=>function(){return t.createElement(D,{labelInValue:!0,defaultValue:{value:a||"\u8D1F\u8D23\u4EBA",key:e.personId},onChange:l=>{n(b(d({},e),{personId:l.key}))}},t.createElement(D.Option,{value:""},"\u8D1F\u8D23\u4EBA"),r.map(l=>t.createElement(D.Option,{value:l.name,key:l.id},l.name)))},[a]);return t.createElement(yn,{action:""},t.createElement(bn,{placeholder:"\u9879\u76EE\u540D\u79F0",type:"text",size:"middle",value:e.name,onChange:l=>n(b(d({},e),{name:l.target.value}))}),t.createElement(s,null))}const yn=g(h)`
  // display: flex;
  // justify-content: space-between;
  // margin-left: 1vw;
  // margin-right: 1vw;
`,bn=g(I)`
  width: 30vw;
  margin-right: 2vw; 
`;function In(){f(),ne("\u9879\u76EE\u5217\u8868");const[e,n]=T(["name","personId"]),r=Ae(e,200),{isLoading:a,error:o,data:s}=Le(r),{data:l}=se(),{open:c}=L();return t.createElement(Fn,null,t.createElement(P,{between:!0},t.createElement("h1",null,"\u9879\u76EE\u5217\u8868"),t.createElement(y,{onClick:()=>{c()}},"\u521B\u5EFA\u9879\u76EE")),t.createElement(K,{error:o}),t.createElement(hn,{param:e,setParam:n,users:l||[]}),t.createElement(fn,{users:l||[],dataSource:s||void 0,loading:a}))}const Fn=g.div`
  padding:0 3rem 0 3rem;
  flex: 1
`,vn=()=>{const{projectModalOpen:e,close:n,editingProject:r,isLoading:a}=L(),o=r?Oe:Dt,{mutateAsync:s,error:l,isLoading:c}=o(q()),[u]=h.useForm(),i=k=>{console.log("Received values of form: ",k),s(d(d({},r),k)).then(()=>{u.resetFields(),n()})},m=()=>{u.resetFields(),n()},p=r?"\u7F16\u8F91\u9879\u76EE":"\u521B\u5EFA\u9879\u76EE";return E.exports.useEffect(()=>{u.setFieldsValue(r)},[r,u]),t.createElement(Ie,{forceRender:!0,onClose:m,visible:e,width:"100%"},t.createElement(Cn,null,a?t.createElement(G,{size:"large"}):t.createElement(t.Fragment,null,t.createElement("h1",null,p),t.createElement(K,{error:l}),t.createElement(h,{form:u,layout:"vertical",style:{width:"40rem"},onFinish:i},t.createElement(h.Item,{label:"\u540D\u79F0",name:"name",rules:[{required:!0,message:"\u8BF7\u8F93\u5165\u9879\u76EE\u540D"}]},t.createElement(I,{placeholder:"\u8BF7\u8F93\u5165\u9879\u76EE\u540D\u79F0"})),t.createElement(h.Item,{label:"\u90E8\u95E8",name:"organization",rules:[{required:!0,message:"\u8BF7\u8F93\u5165\u90E8\u95E8\u540D"}]},t.createElement(I,{placeholder:"\u8BF7\u8F93\u5165\u90E8\u95E8\u540D"})),t.createElement(h.Item,{label:"\u8D1F\u8D23\u4EBA",name:"personId"},t.createElement(ue,{defaultOptionName:"\u8D1F\u8D23\u4EBA"})),t.createElement(h.Item,{style:{textAlign:"right"}},t.createElement(y,{loading:c,type:"primary",htmlType:"submit"},"\u63D0\u4EA4"))))))},Cn=g.div`
  height: 80vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
`;function kn(){return t.createElement(st,null,t.createElement(Pn,null,t.createElement(xn,null),t.createElement(Tn,null,t.createElement(Fe,null,t.createElement(A,{path:"/projects",element:t.createElement(In,null)}),t.createElement(A,{path:"/projects/:projectId/*",element:t.createElement(mn,null)}),t.createElement(A,{path:"*",element:t.createElement(ve,{to:"projects"})}))),t.createElement(vn,null)))}const xn=()=>t.createElement(wn,{between:!0},t.createElement(Dn,{gap:!0},t.createElement(y,{type:"link",onClick:()=>{window.location.href=window.location.origin}},"\u4E3B\u9875"),t.createElement(jt,null),t.createElement(St,null)),t.createElement(An,null,t.createElement(Bn,null))),Bn=()=>{const{logout:e,user:n}=O();return t.createElement(Z,{overlay:t.createElement(C,null,t.createElement(C.Item,null,t.createElement(y,{type:"link",onClick:e},"\u9000\u51FA")))},t.createElement(y,{type:"link",onClick:r=>r.preventDefault()},"Hi, ",n==null?void 0:n.name))},Pn=g.div`
  display: grid;
  grid-template-rows: 6rem 1fr;
  height: 100vh;
`,wn=g(P)`
  padding: 0 3rem 0 3rem;
  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.1);
  z-index: 1;
`,Dn=g(P)``,An=g.div``,Tn=g.main`
  display: flex;
  overflow: hidden;
`;function jn({onError:e}){const{login:n,user:r}=O(),{run:a,isLoading:o}=re(),s=l=>{e(null),a(n(l).catch(e))};return t.createElement(h,{onFinish:s},t.createElement(h.Item,{name:"username",rules:[{required:!0,message:"\u8BF7\u8F93\u5165\u7528\u6237\u540D"}]},t.createElement(I,{placeholder:"\u7528\u6237\u540D",type:"text",id:"username"})),t.createElement(h.Item,{name:"password",rules:[{required:!0,message:"\u8BF7\u8F93\u5165\u7528\u6237\u540D"}]},t.createElement(I,{placeholder:"\u5BC6\u7801",id:"password"})),t.createElement(Je,{type:"primary",htmlType:"submit",loading:o}," \u767B\u5F55"))}function Sn({onError:e}){const{run:n,isLoading:r}=re(),{register:a,user:o}=O(),s=u=>{var i=u,{cpassword:l}=i,c=v(i,["cpassword"]);if(e(null),l!==c.password){e(new Error("\u4E24\u6B21\u8F93\u5165\u7684\u5BC6\u7801\u4E0D\u4E00\u81F4"));return}n(a(c).catch(m=>{e(m)}))};return t.createElement(h,{onFinish:s},t.createElement(h.Item,{name:"username",rules:[{required:!0,message:"\u8BF7\u8F93\u5165\u7528\u6237\u540D"}]},t.createElement(I,{placeholder:"\u7528\u6237\u540D",type:"text",id:"username"})),t.createElement(h.Item,{name:"password",rules:[{required:!0,message:"\u8BF7\u8F93\u5165\u5BC6\u7801"}]},t.createElement(I,{placeholder:"\u5BC6\u7801",id:"password"})),t.createElement(h.Item,{name:"cpassword",rules:[{required:!0,message:"\u8BF7\u786E\u8BA4\u5BC6\u7801"}]},t.createElement(I,{placeholder:"\u5BC6\u7801",id:"cpassword"})),t.createElement(Je,{type:"primary",htmlType:"submit",loading:r}," \u6CE8\u518C"))}var Ln="/assets/logo.aa35c111.svg",On="/assets/left.54ddf911.svg",Rn="/assets/right.47245c1a.svg";function Mn(){const[e,n]=E.exports.useState(!1),[r,a]=E.exports.useState(null);return ne("\u8BF7\u767B\u5F55\u6CE8\u518C\u4EE5\u7EE7\u7EED"),t.createElement(_n,null,t.createElement(Un,null),t.createElement(Nn,null),t.createElement(Kn,null,t.createElement($n,null,e?"\u8BF7\u6CE8\u518C":"\u8BF7\u767B\u5F55"),t.createElement(K,{error:r}),e?t.createElement(Sn,{onError:a}):t.createElement(jn,{onError:a}),t.createElement(ye,null),t.createElement(y,{type:"link",onClick:()=>n(!e)},e?"\u5DF2\u7ECF\u6709\u8D26\u53F7\u4E86\uFF1F\u76F4\u63A5\u767B\u5F55":"\u6CA1\u6709\u8D26\u53F7\uFF1F\u6CE8\u518C\u65B0\u8D26\u53F7")))}const Je=g(y)`
  width: 100%;
`,$n=g.h2`
  margin-bottom: 2.4rem;
  color: rgb(94, 108, 132);
`,Nn=g.div`
  position: absolute;
  width: 100%;
  height: 100%;
  background-repeat: no-repeat;
  background-attachment: fixed;
  background-position: left bottom, right bottom;
  background-size: calc(((100vw - 40rem) / 2) - 3.2rem),
    calc(((100vw - 40rem) / 2) - 3.2rem), cover;
  background-image: url(${On}), url(${Rn});
`,Un=g.header`
  background: url(${Ln}) no-repeat center;
  padding: 5rem 0;
  background-size: 8rem;
  width: 100%;
`,Kn=g(X)`
  width: 40rem;
  min-height: 56rem;
  padding: 3.2rem 4rem;
  border-radius: 0.3rem;
  box-sizing: border-box;
  box-shadow: rgba(0, 0, 0, 0.1) 0 0 10px;
  text-align: center;
`,_n=g.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 100vh;
`;class zn extends t.Component{constructor(){super(...arguments);me(this,"state",{error:null})}static getDerivedStateFromError(n){return{error:n}}render(){const{error:n}=this.state,{fallbackRender:r,children:a}=this.props;return n?r({error:n}):a}}function Qn(){const{user:e}=O();return document.addEventListener("error",n=>{alert(n)}),t.createElement("div",{className:"App"},t.createElement(zn,{fallbackRender:ke},e?t.createElement(kn,null):t.createElement(Mn,null)))}function Vn({children:e}){return t.createElement(lt,{client:new ct},t.createElement(kt,null,e))}ut(()=>{it.render(t.createElement(t.StrictMode,null,t.createElement(Vn,null,t.createElement(fe,null),t.createElement(Qn,null))),document.getElementById("root"))});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYzY1MmFkODUuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3ZpdGUvbW9kdWxlcHJlbG9hZC1wb2x5ZmlsbCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL2xpYi50c3giLCIuLi8uLi9zcmMvYXV0aC1wcm92aWRlci50cyIsIi4uLy4uL3NyYy91dGlscy9pbmRleC50cyIsIi4uLy4uL3NyYy91dGlscy91c2UtYXN5bmMudHMiLCIuLi8uLi9zcmMvY29udGV4dC9hdXRoLWNvbnRleHQudHN4IiwiLi4vLi4vc3JjL3V0aWxzL2h0dHAudHMiLCIuLi8uLi9zcmMvdXRpbHMvcmVvcmRlci50cyIsIi4uLy4uL3NyYy91dGlscy91c2Utb3B0aW1pc3RpYy1vcHRpb25zLnRzIiwiLi4vLi4vc3JjL3V0aWxzL3Byb2plY3QudHMiLCIuLi8uLi9zcmMvdXRpbHMvdXJsLnRzIiwiLi4vLi4vc3JjL3NjcmVlbnMvcHJvamVjdC1saXN0L3V0aWwudHMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9wcm9qZWN0LXBvcG92ZXIudHN4IiwiLi4vLi4vc3JjL3V0aWxzL3VzZXIudHMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy91c2VyLXBvcG92ZXIudHN4IiwiLi4vLi4vc3JjL3V0aWxzL2VwaWMudHMiLCIuLi8uLi9zcmMvdXRpbHMvdGFzay50cyIsIi4uLy4uL3NyYy9zY3JlZW5zL0thbmJhbi91dGlsLnRzIiwiLi4vLi4vc3JjL3NjcmVlbnMvZXBpYy91dGlsLnRzIiwiLi4vLi4vc3JjL3NjcmVlbnMvZXBpYy9jcmVhdGUtZXBpYy50c3giLCIuLi8uLi9zcmMvc2NyZWVucy9lcGljL2luZGV4LnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL2RyYWctYW5kLWRyb3AudHN4IiwiLi4vLi4vc3JjL3V0aWxzL2thbmJhbi50cyIsIi4uLy4uL3NyYy91dGlscy90YXNrLXR5cGUudHMiLCIuLi8uLi9zcmMvYXNzZXRzL3Rhc2suc3ZnIiwiLi4vLi4vc3JjL2Fzc2V0cy9idWcuc3ZnIiwiLi4vLi4vc3JjL3NjcmVlbnMvS2FuYmFuL2NyZWF0ZS10YXNrLnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL21hcmsudHN4IiwiLi4vLi4vc3JjL3NjcmVlbnMvS2FuYmFuL2thbmJhbi1jb2x1bW4udHN4IiwiLi4vLi4vc3JjL3NjcmVlbnMvS2FuYmFuL2NyZWF0ZS1rYW5iYW4udHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvaWQtc2VsZWN0LnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL3Rhc2stdHlwZS1zZWxlY3QudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvdXNlci1zZWxlY3QudHN4IiwiLi4vLi4vc3JjL3NjcmVlbnMvS2FuYmFuL3NlYXJjaC1wYW5lbC50c3giLCIuLi8uLi9zcmMvc2NyZWVucy9LYW5iYW4vdGFzay1tb2RhbC50c3giLCIuLi8uLi9zcmMvc2NyZWVucy9LYW5iYW4vaW5kZXgudHN4IiwiLi4vLi4vc3JjL3NjcmVlbnMvcHJvamVjdC9pbmRleC50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9waW4udHN4IiwiLi4vLi4vc3JjL3NjcmVlbnMvcHJvamVjdC1saXN0L2xpc3QudHN4IiwiLi4vLi4vc3JjL3NjcmVlbnMvcHJvamVjdC1saXN0L3NlYXJjaC1wYW5lbC50c3giLCIuLi8uLi9zcmMvc2NyZWVucy9wcm9qZWN0LWxpc3QvaW5kZXgudHN4IiwiLi4vLi4vc3JjL3NjcmVlbnMvcHJvamVjdC1saXN0L3Byb2plY3QtbW9kYWwudHN4IiwiLi4vLi4vc3JjL2F1dGhlbnRpY2F0ZWQtYXBwLnRzeCIsIi4uLy4uL3NyYy91bmF1dGhlbnRpY2F0ZWQtYXBwL2xvZ2luLnRzeCIsIi4uLy4uL3NyYy91bmF1dGhlbnRpY2F0ZWQtYXBwL3JlZ2lzdGVyLnRzeCIsIi4uLy4uL3NyYy9hc3NldHMvbG9nby5zdmciLCIuLi8uLi9zcmMvYXNzZXRzL2xlZnQuc3ZnIiwiLi4vLi4vc3JjL2Fzc2V0cy9yaWdodC5zdmciLCIuLi8uLi9zcmMvdW5hdXRoZW50aWNhdGVkLWFwcC9pbmRleC50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9lcnJvci1ib3VuZGFyeS50c3giLCIuLi8uLi9zcmMvQXBwLnRzeCIsIi4uLy4uL3NyYy9jb250ZXh0L2luZGV4LnRzeCIsIi4uLy4uL3NyYy9tYWluLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwID0gZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gICAgY29uc3QgcmVsTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKS5yZWxMaXN0O1xuICAgIGlmIChyZWxMaXN0ICYmIHJlbExpc3Quc3VwcG9ydHMgJiYgcmVsTGlzdC5zdXBwb3J0cygnbW9kdWxlcHJlbG9hZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBsaW5rIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmtbcmVsPVwibW9kdWxlcHJlbG9hZFwiXScpKSB7XG4gICAgICAgIHByb2Nlc3NQcmVsb2FkKGxpbmspO1xuICAgIH1cbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgbXV0YXRpb24gb2YgbXV0YXRpb25zKSB7XG4gICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSAhPT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBtdXRhdGlvbi5hZGRlZE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gJ0xJTksnICYmIG5vZGUucmVsID09PSAnbW9kdWxlcHJlbG9hZCcpXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NQcmVsb2FkKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkub2JzZXJ2ZShkb2N1bWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gICAgZnVuY3Rpb24gZ2V0RmV0Y2hPcHRzKHNjcmlwdCkge1xuICAgICAgICBjb25zdCBmZXRjaE9wdHMgPSB7fTtcbiAgICAgICAgaWYgKHNjcmlwdC5pbnRlZ3JpdHkpXG4gICAgICAgICAgICBmZXRjaE9wdHMuaW50ZWdyaXR5ID0gc2NyaXB0LmludGVncml0eTtcbiAgICAgICAgaWYgKHNjcmlwdC5yZWZlcnJlcnBvbGljeSlcbiAgICAgICAgICAgIGZldGNoT3B0cy5yZWZlcnJlclBvbGljeSA9IHNjcmlwdC5yZWZlcnJlcnBvbGljeTtcbiAgICAgICAgaWYgKHNjcmlwdC5jcm9zc29yaWdpbiA9PT0gJ3VzZS1jcmVkZW50aWFscycpXG4gICAgICAgICAgICBmZXRjaE9wdHMuY3JlZGVudGlhbHMgPSAnaW5jbHVkZSc7XG4gICAgICAgIGVsc2UgaWYgKHNjcmlwdC5jcm9zc29yaWdpbiA9PT0gJ2Fub255bW91cycpXG4gICAgICAgICAgICBmZXRjaE9wdHMuY3JlZGVudGlhbHMgPSAnb21pdCc7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZldGNoT3B0cy5jcmVkZW50aWFscyA9ICdzYW1lLW9yaWdpbic7XG4gICAgICAgIHJldHVybiBmZXRjaE9wdHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQcmVsb2FkKGxpbmspIHtcbiAgICAgICAgaWYgKGxpbmsuZXApXG4gICAgICAgICAgICAvLyBlcCBtYXJrZXIgPSBwcm9jZXNzZWRcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGluay5lcCA9IHRydWU7XG4gICAgICAgIC8vIHByZXBvcHVsYXRlIHRoZSBsb2FkIHJlY29yZFxuICAgICAgICBjb25zdCBmZXRjaE9wdHMgPSBnZXRGZXRjaE9wdHMobGluayk7XG4gICAgICAgIGZldGNoKGxpbmsuaHJlZiwgZmV0Y2hPcHRzKTtcbiAgICB9XG59O19fVklURV9JU19NT0RFUk5fXyYmcCgpOyIsImltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgQnV0dG9uLCBTcGluLCBUeXBvZ3JhcGh5IH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCB7IERldlRvb2xzIH0gZnJvbSBcImppcmEtZGV2LXRvb2xcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbi8vIGltcG9ydCB7IERldlRvb2xzIH0gZnJvbSBcImppcmEtZGV2LXRvb2xcIjtcbi8vIGV4cG9ydCBjb25zdCBSb3cgPSBzdHlsZWQuZGl2PHsgZ2FwPzogbnVtYmVyIHwgYm9vbGVhbiB9PmBcbi8vICAgZGlzcGxheTogZmxleDtcbi8vICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbi8vICAgPiAqIHtcbi8vICAgICBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7XG4vLyAgICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50O1xuLy8gICAgIG1hcmdpbi1yaWdodDogJHsocHJvcHMgPSB0eXBlb2YgcHJvcHMuZ2FwKX07XG4vLyAgIH1cbi8vIGA7XG5leHBvcnQgY29uc3QgUm93ID0gc3R5bGVkLmRpdjx7XG4gIGdhcD86IG51bWJlciB8IGJvb2xlYW47XG4gIGJldHdlZW4/OiBib29sZWFuOyBcbiAgbWFyZ2luQm90dG9tPzogbnVtYmVyIFxufT5gXG5kaXNwbGF5OiBmbGV4O1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbmp1c3RpZnktY29udGVudDogJHsocHJvcHMgPT4gcHJvcHMuYmV0d2Vlbj8gJ3NwYWNlLWJldHdlZW4nOiB1bmRlZmluZWQpfTtcbj4gKiB7XG4gIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcbiAgbWFyZ2luLWJvdHRvbTogJHsocHJvcHMpID0+IHR5cGVvZiBwcm9wcy5tYXJnaW5Cb3R0b20gPT09ICdudW1iZXInPyBwcm9wcy5tYXJnaW5Cb3R0b20rJ3JlbSc6IDB9IDtcbiAgbWFyZ2luLXJpZ2h0OiAke3Byb3BzID0+IHR5cGVvZiBwcm9wcy5nYXAgPT09ICdudW1iZXInID8gcHJvcHMuZ2FwKyAncmVtJzogIHByb3BzLmdhcCA/ICcycmVtJzogJzAnfVxufWBcblxuXG5jb25zdCBGdWxsUGFnZSA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogMTAwdmg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG5gXG5leHBvcnQgY29uc3QgRnVsbFBhZ2VMb2FkaW5nID0gKCkgPT4gPEZ1bGxQYWdlPlxuICA8U3BpbiBzaXplPXsnbGFyZ2UnfS8+XG48L0Z1bGxQYWdlPlxuXG5cbmV4cG9ydCBjb25zdCBGdWxsUGFnZUVycm9yRmFsbGJhY2sgPSAoe2Vycm9yfToge2Vycm9yOiBFcnJvcnwgbnVsbH0pPT4gPEZ1bGxQYWdlPlxuICA8RXJyb3JCb3ggZXJyb3I9e2Vycm9yfT48L0Vycm9yQm94PlxuICA8RGV2VG9vbHMgLz5cbjwvRnVsbFBhZ2U+XG5cbmV4cG9ydCBjb25zdCBCdXR0b25Ob1BhZGRpbmcgPSBzdHlsZWQoQnV0dG9uKWBcbiAgcGFkZGluZzogMHB4O1xuYFxuY29uc3QgaXNFcnJvciA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgRXJyb3IgPT4gdmFsdWU/Lm1lc3NhZ2VcbmV4cG9ydCBjb25zdCBFcnJvckJveCA9IGZ1bmN0aW9uKHtlcnJvcn06IHtlcnJvcjogdW5rbm93bn0pe1xuICBpZihpc0Vycm9yKGVycm9yKSl7XG4gICAgcmV0dXJuIDxUeXBvZ3JhcGh5LlRleHQgdHlwZT17J2Rhbmdlcid9PntlcnJvci5tZXNzYWdlfTwvVHlwb2dyYXBoeS5UZXh0PlxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgIGNvbnN0IFNjcmVlbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDMuMnJlbTtcbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IFxuYCAiLCIvL+WcqOecn+WunueOr+Wig+S4re+8jOWmguaenOS9v+eUqGZpcmViYXNl6L+Z56eN56ys5LiJ5pa5YXV0aOacjeWKoeeahOivne+8jOacrOaWh+S7tuS4jemcgOimgeW8gOWPkeiAheW8gOWPkVxuXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4vdHlwZXMvdXNlclwiO1xuXG5jb25zdCBsb2NhbFN0b3JhZ2VLZXkgPSAnX19hdXRoX3Byb3ZpZGVyX3Rva2VuX18nXG5cbmV4cG9ydCBjb25zdCBnZXRUb2tlbiA9ICgpID0+IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShsb2NhbFN0b3JhZ2VLZXkpXG5cbmV4cG9ydCBjb25zdCBoYW5kbGVVc2VyUmVzcG9uc2UgPSAoe3VzZXJ9OiB7dXNlcjogVXNlcn0pID0+e1xuICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0obG9jYWxTdG9yYWdlS2V5LCB1c2VyLnRva2VuIHx8ICcnKVxuICByZXR1cm4gdXNlcjtcbn1cblxuXG5jb25zdCBhcGlVcmwgPSBwcm9jZXNzLmVudi5SRUFDVF9BUFBfQVBJX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAxJ1xuZXhwb3J0IGNvbnN0IGxvZ2luID0gKGRhdGE6IHt1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nfSkgPT57XG4gIHJldHVybiBmZXRjaChgJHthcGlVcmx9L2xvZ2luYCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICB9KS50aGVuKGFzeW5jIChyZXNwb25zZTogUmVzcG9uc2UpID0+e1xuICAgIGlmKHJlc3BvbnNlLm9rKXtcbiAgICAgIHJldHVybiBoYW5kbGVVc2VyUmVzcG9uc2UoYXdhaXQgcmVzcG9uc2UuanNvbigpKVxuICAgIH1lbHNle1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgfVxuICB9KSAgXG59XG5leHBvcnQgY29uc3QgcmVnaXN0ZXIgPSAoZGF0YToge3VzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmd9KSA9PntcbiAgcmV0dXJuIGZldGNoKGAke2FwaVVybH0vcmVnaXN0ZXJgLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICB9KS50aGVuKGFzeW5jIChyZXNwb25zZTogUmVzcG9uc2UpPT57XG4gICAgaWYocmVzcG9uc2Uub2spe1xuICAgICAgcmV0dXJuIGhhbmRsZVVzZXJSZXNwb25zZShhd2FpdCByZXNwb25zZS5qc29uKCkpXG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCBsb2dvdXQgPWFzeW5jICgpID0+e1xuICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obG9jYWxTdG9yYWdlS2V5KVxuICBcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNvbnN0IGlzRmFsc3kgPSAodmFsdWU6IHVua25vd24pID0+IHZhbHVlID09PSAwID8gZmFsc2UgOiAgIXZhbHVlO1xuZXhwb3J0ICBjb25zdCBpc1ZvaWQgPSAodmFsdWU6IHVua25vd24pID0+IHZhbHVlPT09bnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAnJztcbmV4cG9ydCBjb25zdCBjbGVhbk9iamVjdCA9IChvYmplY3Q6IHtba2V5OiBzdHJpbmddOiB1bmtub3dufSk6IGFueSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHsgLi4ub2JqZWN0IH07XG4gIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHJlc3VsdFtrZXldO1xuICAgIGlmIChpc1ZvaWQodmFsdWUpKSB7XG4gICAgICBkZWxldGUgcmVzdWx0W2tleV1cbiAgICB9XG4gIH0pXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBjb25zdCB1c2VNb3VudCA9IChjYWxsYmFjazogKCk9PnZvaWQpID0+e1xuICB1c2VFZmZlY3QoKCk9PntcbiAgICBjYWxsYmFjaygpXG4gIH0sIFtdKVxufVxuXG4vLyBjb25zdCBkZWJvdW5jZSA9KGZ1bmMsIGRlbGF5KSA9Pntcbi8vICAgbGV0IHRpbWVvdXQgPSBudWxsO1xuLy8gICByZXR1cm4gZnVuY3Rpb24oLi4ucGFyYW0pe1xuLy8gICAgIGlmKHRpbWVvdXQpe1xuLy8gICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4vLyAgICAgfVxuLy8gICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbi8vICAgICAgIGZ1bmMoLi4ucGFyYW0pXG4vLyAgICAgfSwgZGVsYXkpO1xuLy8gICB9XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VEZWJvdW5jZTxUPih2YWx1ZTpULCBkZWxheT86IG51bWJlcik6IFQge1xuICAvLyDmr4/mrKHlnKh2YWx1ZeWPmOWMluS7peWQju+8jOiuvue9ruS4gOS4quWumuaXtuWZqFxuICBjb25zdCBbZGVib3VuY2VkVmFsdWUsIHNldERlYm91bmNlZFZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBzZXREZWJvdW5jZWRWYWx1ZSh2YWx1ZSksIGRlbGF5KTtcbiAgICAvLyDmr4/mrKHlnKjkuIrkuIDkuKp1c2VFZmZlY3TlpITnkIblrozku6XlkI7lho3ov5DooYxcbiAgICByZXR1cm4gKCk9PntcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KVxuICAgIH1cbiAgfSwgW3ZhbHVlLCBkZWxheV0pXG4gIHJldHVybiBkZWJvdW5jZWRWYWx1ZVxufVxuXG5pbnRlcmZhY2UgUGVyc29uIHtcbiAgbmFtZTogc3RyaW5nO1xuICBhZWc6IG51bWJlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VBcnJheTxUPihhcnJheTogVFtdKSB7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoYXJyYXkpO1xuICBmdW5jdGlvbiBjbGVhcigpe1xuICAgIHNldFZhbHVlKFtdKVxuICB9O1xuICBmdW5jdGlvbiByZW1vdmVJbmRleChpbmRleDogbnVtYmVyKSB7XG4gICAgY29uc3QgbmV3QXJyYXkgPSBbLi4udmFsdWVdO1xuICAgIG5ld0FycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgc2V0VmFsdWUobmV3QXJyYXkpO1xuICB9XG4gIGZ1bmN0aW9uIGFkZChpdGVtOiBUKXtcbiAgICBzZXRWYWx1ZShbLi4udmFsdWUsIGl0ZW1dKVxuICB9XG4gIHJldHVybiB7dmFsdWUsIGNsZWFyLCByZW1vdmVJbmRleCwgYWRkfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURvY3VtZW50VGl0bGUodGl0bGU6IHN0cmluZywga2VlcE9uVW5tb3VudDogYm9vbGVhbiAgPSB0cnVlKXtcbiAgICBjb25zdCBvbGRUaXRsZSA9IHVzZVJlZjxzdHJpbmc+KGRvY3VtZW50LnRpdGxlKS5jdXJyZW50O1xuXG4gICAgdXNlRWZmZWN0KCgpPT57XG4gICAgICBkb2N1bWVudC50aXRsZSA9IHRpdGxlO1xuICAgIH0sIFt0aXRsZV0pO1xuXG4gICAgdXNlRWZmZWN0KCgpPT57XG4gICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBvbGRUaXRsZTtcbiAgICAgIH1cbiAgICB9LCBbb2xkVGl0bGUsa2VlcE9uVW5tb3VudF0pO1xufVxuXG5leHBvcnQgY29uc3QgdXNlTW91bnRlZCAgPSAoKSA9PntcbiAgY29uc3QgbW91bnRlZFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gIHVzZUVmZmVjdCgoKT0+e1xuICAgIG1vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgcmV0dXJuICgpPT57XG4gICAgICBtb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIG1vdW50ZWRSZWZcbn1cblxuZXhwb3J0IGNvbnN0IHN1YnNldCA9IDxcbiAgTyBleHRlbmRzIHsgW2tleSBpbiBzdHJpbmddOiB1bmtub3duIH0sXG4gIEsgZXh0ZW5kcyBrZXlvZiBPXG4+KFxuICBvYmo6IE8sXG4gIGtleXM6IEtbXVxuKSA9PiB7XG4gIGNvbnN0IGZpbHRlcmVkRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKG9iaikuZmlsdGVyKChba2V5XSkgPT5cbiAgICBrZXlzLmluY2x1ZGVzKGtleSBhcyBLKVxuICApO1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGZpbHRlcmVkRW50cmllcykgYXMgUGljazxPLCBLPjtcbn07IiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZHVjZXIsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VNb3VudGVkIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmludGVyZmFjZSBTdGF0ZTxEPiB7XG4gIGVycm9yOiBFcnJvciB8IG51bGw7XG4gIGRhdGE6IEQgfCBudWxsO1xuICBzdGF0OiBcImlkbGVcIiB8IFwibG9hZGluZ1wiIHwgXCJlcnJvclwiIHwgXCJzdWNjZXNzXCI7XG59XG5cbmNvbnN0IGRlZmF1bHRJbml0aWFsU3RhdGU6IFN0YXRlPG51bGw+ID0ge1xuICBlcnJvcjogbnVsbCxcbiAgZGF0YTogbnVsbCxcbiAgc3RhdDogXCJpZGxlXCIsXG59O1xuXG5jb25zdCB1c2VTYWZlRGlzcGF0Y2ggPSA8VD4oZGlzcGF0Y2g6ICguLi5hcmdzOiBUW10pPT52b2lkKT0+e1xuICBjb25zdCBtb3VudGVkUmVmID0gIHVzZU1vdW50ZWQoKTtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrKCguLi5hcmdzOiBUW10pPT4gKG1vdW50ZWRSZWYuY3VycmVudD8gZGlzcGF0Y2goLi4uYXJncyk6IHZvaWQgMCksW21vdW50ZWRSZWYsIGRpc3BhdGNoXSlcbn1cblxuZXhwb3J0IGNvbnN0IHVzZUFzeW5jID0gPEQ+KGluaXRpYWxTdGF0ZT86IFN0YXRlPEQ+KSA9PiB7XG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gdXNlUmVkdWNlcihcbiAgICAoc3RhdGU6IFN0YXRlPEQ+LCBhY3Rpb246IFBhcnRpYWw8U3RhdGU8RD4+KSA9PiAoeyAuLi5zdGF0ZSwgLi4uYWN0aW9uIH0pLFxuICAgIHsgLi4uZGVmYXVsdEluaXRpYWxTdGF0ZSwgLi4uaW5pdGlhbFN0YXRlIH1cbiAgKTtcbiAgY29uc3QgW3JldHJ5LCBzZXRSZXRyeV0gPSB1c2VTdGF0ZSgoKSA9PiAoKSA9PiB7fSk7XG4gIGNvbnN0IHNhZmVEaXNwYXRjaCA9IHVzZVNhZmVEaXNwYXRjaChkaXNwYXRjaCk7XG5cbiAgY29uc3Qgc2V0RGF0YSA9IHVzZUNhbGxiYWNrKChkYXRhOiBEKSA9PiB7XG4gICAgc2FmZURpc3BhdGNoKHsgZXJyb3I6IG51bGwsIGRhdGEsIHN0YXQ6IFwic3VjY2Vzc1wiIH0pO1xuICB9LFtzYWZlRGlzcGF0Y2hdKTtcbiAgY29uc3Qgc2V0RXJyb3IgPSB1c2VDYWxsYmFjaygoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgc2FmZURpc3BhdGNoKHsgZXJyb3IsIHN0YXQ6IFwiZXJyb3JcIiwgZGF0YTogbnVsbCB9KTtcbiAgfSxbc2FmZURpc3BhdGNoIF0pXG4gIGNvbnN0IHJ1biA9IHVzZUNhbGxiYWNrKChcbiAgICBwcm9taXNlOiBQcm9taXNlPEQ+LFxuICAgIHJ1bkNvbmZpZz86IHsgcmV0cnk6ICgpID0+IFByb21pc2U8RD4gfVxuICApID0+IHtcbiAgICAvLyBpZighKCBwcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkpe1xuICAgIC8vICAgdGhyb3cgbmV3IEVycm9yKCd1c2VBc3luYzogcHJvbWlzZSBtdXN0IGJlIGEgUHJvbWlzZScpXG4gICAgLy8gfVxuICAgIGlmICghcHJvbWlzZSB8fCAhcHJvbWlzZS50aGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCLor7fkvKDlhaUgUHJvbWlzZSDnsbvlnovmlbDmja4gXCIpO1xuICAgIH1cbiAgICBzZXRSZXRyeSgoKSA9PiAoKSA9PiB7XG4gICAgICBpZiAocnVuQ29uZmlnPy5yZXRyeSkge1xuICAgICAgICBydW4ocnVuQ29uZmlnPy5yZXRyeSgpLCBydW5Db25maWcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2FmZURpc3BhdGNoKHsgc3RhdDogXCJsb2FkaW5nXCIsIGRhdGE6IG51bGwsIGVycm9yOiBudWxsIH0pO1xuICAgIHJldHVybiBwcm9taXNlXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBzZXREYXRhKGRhdGEpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBzZXRFcnJvcihlcnIpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICB9LFtzZXREYXRhLCBzZXRFcnJvciwgc2FmZURpc3BhdGNoXSlcbiAgcmV0dXJuIHtcbiAgICBpc0lkbGU6IHN0YXRlLnN0YXQgPT09IFwiaWRsZVwiLFxuICAgIGlzTG9hZGluZzogc3RhdGUuc3RhdCA9PT0gXCJsb2FkaW5nXCIsXG4gICAgaXNFcnJvcjogc3RhdGUuc3RhdCA9PT0gXCJlcnJvclwiLFxuICAgIGlzU3VjY2Vzczogc3RhdGUuc3RhdCA9PT0gXCJzdWNjZXNzXCIsXG4gICAgcnVuLFxuICAgIHNldERhdGEsXG4gICAgc2V0RXJyb3IsXG4gICAgcmV0cnksXG4gICAgLi4uc3RhdGUsXG4gIH07XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi90eXBlcy91c2VyXCI7XG5pbXBvcnQgKiBhcyBhdXRoIGZyb20gJy4uL2F1dGgtcHJvdmlkZXInO1xuaW1wb3J0IHsgaHR0cCB9IGZyb20gJy4uL3V0aWxzL2h0dHAnO1xuaW1wb3J0IHsgdXNlTW91bnQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyB1c2VBc3luYyB9IGZyb20gJy4uL3V0aWxzL3VzZS1hc3luYyc7XG5pbXBvcnQgeyBGdWxsUGFnZUVycm9yRmFsbGJhY2ssIEZ1bGxQYWdlTG9hZGluZyB9IGZyb20gJy4uL2NvbXBvbmVudHMvbGliJztcbmltcG9ydCB7IHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSAncmVhY3QtcXVlcnknO1xuXG5cbmludGVyZmFjZSBBdXRoRm9ybSB7XG4gIHVzZXJuYW1lOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG59XG5cbmNvbnN0IGJvb3RzdHJhcFVzZXIgPSBhc3luYyAoKSA9PiB7XG4gIGxldCB1c2VyID0gbnVsbDtcbiAgY29uc3QgdG9rZW4gPSBhdXRoLmdldFRva2VuKCk7XG4gIGlmKHRva2VuKSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGh0dHAoJ21lJywge3Rva2VufSk7XG4gICAgdXNlciA9IGRhdGEudXNlcjtcbiAgfVxuICByZXR1cm4gdXNlcjtcbn1cblxuY29uc3QgQXV0aENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PHtcbiAgdXNlcjogVXNlcnwgbnVsbDtcbiAgbG9naW46IChmb3JtIDogQXV0aEZvcm0pID0+IFByb21pc2U8dm9pZD47XG4gIHJlZ2lzdGVyOiAoZm9ybTogQXV0aEZvcm0pID0+IFByb21pc2U8dm9pZD47XG4gIGxvZ291dDogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgXG59IHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuQXV0aENvbnRleHQuZGlzcGxheU5hbWUgPSAnQXV0aENvbnRleHQnO1xuXG5leHBvcnQgY29uc3QgQXV0aFByb3ZpZGVyID0gKHtjaGlsZHJlbn06IHtjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlfSkgPT57XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoKTtcbiAgY29uc3Qge2lzTG9hZGluZywgaXNFcnJvciwgcnVuLCBpc0lkbGUsIGRhdGE6IHVzZXIsIHNldERhdGE6IHNldFVzZXIsIGVycm9yfSA9IHVzZUFzeW5jPFVzZXIgfCBudWxsPigpXG4gIHVzZU1vdW50KCgpPT57XG4gICAgLy8gYm9vdHN0cmFwVXNlcigpLnRoZW4oc2V0VXNlcilcbiAgICBydW4oYm9vdHN0cmFwVXNlcigpKVxuICB9KVxuICBpZihpc0lkbGUgfHwgaXNMb2FkaW5nKSB7XG4gICAgcmV0dXJuIDxGdWxsUGFnZUxvYWRpbmcvPlxuICB9XG4gIGlmKGlzRXJyb3Ipe1xuICAgIHJldHVybiA8RnVsbFBhZ2VFcnJvckZhbGxiYWNrIGVycm9yPXtlcnJvcn0vPlxuICB9XG5cblxuICBjb25zdCBsb2dpbiA9IChmb3JtOiBBdXRoRm9ybSkgPT4gYXV0aC5sb2dpbihmb3JtKS50aGVuKHVzZXIgPT57XG4gICAgc2V0VXNlcih1c2VyKVxuICB9KTtcbiAgY29uc3QgcmVnaXN0ZXIgPSAoZm9ybTogQXV0aEZvcm0pID0+IGF1dGgucmVnaXN0ZXIoZm9ybSkudGhlbih1c2VyPT4gc2V0VXNlcih1c2VyKSk7XG5cbiAgY29uc3QgbG9nb3V0ID0gKCkgPT4gYXV0aC5sb2dvdXQoKS50aGVuKCgpID0+e1xuICAgIHNldFVzZXIobnVsbCk7XG4gICAgcXVlcnlDbGllbnQuY2xlYXIoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIDxBdXRoQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e3VzZXIsIGxvZ2luLCByZWdpc3RlciwgbG9nb3V0fX0+XG4gICAge2NoaWxkcmVufVxuICAgIDwvQXV0aENvbnRleHQuUHJvdmlkZXI+XG59XG4gXG5leHBvcnQgZGVmYXVsdCBBdXRoQ29udGV4dDtcblxuXG5leHBvcnQgY29uc3QgdXNlQXV0aCA9ICgpID0+IHtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQXV0aENvbnRleHQpO1xuICBpZighY29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlQXV0aOW/hemhu+WGjUF1dGhQcm92aWRlciDkuK3kvb/nlKgnKVxuICB9XG4gIHJldHVybiBjb250ZXh0OyAgICBcbn0iLCJpbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tIFwicXNcIjtcbmltcG9ydCAqIGFzIGF1dGggZnJvbSAnLi4vYXV0aC1wcm92aWRlcic7XG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSBcIi4uL2NvbnRleHQvYXV0aC1jb250ZXh0XCI7XG5jb25zdCBhcGlVcmwgPSBwcm9jZXNzLmVudi5SRUFDVF9BUFBfQVBJX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAxJ1xuXG5pbnRlcmZhY2UgQ29uZmlnICBleHRlbmRzIFJlcXVlc3RJbml0e1xuICB0b2tlbj86IHN0cmluZztcbiAgZGF0YT86IG9iamVjdFxufSBcbmV4cG9ydCBjb25zdCBodHRwID0gYXN5bmMoZW5kcG9pbnQ6IHN0cmluZywge2RhdGEsIHRva2VuLCBoZWFkZXJzLCAuLi5jdXN0b21Db25maWd9OiBDb25maWcgPSB7fSkgPT57XG4gIGNvbnN0IGNvbmZpZyA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdBdXRob3JpemF0aW9uJzogdG9rZW4/IGBCZWFyZXIgJHt0b2tlbn1gOiAnJyxcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSxcbiAgICAvLyDlpoLmnpxtZXRob2Qg5Li6IFBPU1Qg5Lya6KaG55uW5YmN6Z2i55qE6YWN572uXG4gICAgLi4uY3VzdG9tQ29uZmlnIFxuICB9XG4gIC8vIGNvbnNvbGUubG9nKCd0b2tlbicgLCB0b2tlbilcbiAgaWYoY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSAnR0VUJykge1xuICAgIGVuZHBvaW50ICs9IGA/JHtzdHJpbmdpZnkoZGF0YSl9YFxuICB9ZWxzZXtcbiAgICBjb25maWcuYm9keSA9IEpTT04uc3RyaW5naWZ5KGRhdGEgfHwge30pXG4gIH1cbiAgcmV0dXJuIHdpbmRvdy5mZXRjaChgJHthcGlVcmx9LyR7ZW5kcG9pbnR9YCwgY29uZmlnKS50aGVuKGFzeW5jIHJlc3BvbnNlID0+e1xuICAgIC8vIGNvbnNvbGUubG9nKCdmZXRjaGVkJywgcmVzcG9uc2UpXG4gICAgaWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCfmtYvor5XlpLHotKUnKVxuICAgICAgYXdhaXQgYXV0aC5sb2dvdXQoKTsgICBcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7bWVzc2FnZTogJ+ivt+mHjeaWsOeZu+W9lSd9KVxuICAgIH1cbiAgICBjb25zdCBkYXRhICA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhLCByZXNwb25zZS5vaylcbiAgICBpZihyZXNwb25zZT8ub2spIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1lbHNle1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGRhdGEpO1xuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHVzZUh0dHAgPSAoKSA9PntcbiAgY29uc3Qge3VzZXJ9ID0gdXNlQXV0aCgpO1xuXG4gIC8vIGNvbnNvbGUubG9nKCfosIPnlKgnKVxuICByZXR1cm4gKC4uLltlbmRwb2ludCwgY29uZmlnXTogUGFyYW1ldGVyczx0eXBlb2YgaHR0cD4pID0+IHtcbiAgIHJldHVybiAgaHR0cChlbmRwb2ludCwgey4uLmNvbmZpZywgdG9rZW46IHVzZXI/LnRva2VuIH0pO1xuICB9XG59XG5cblxuLy/ogZTlkIjnsbvlnotcbmxldCBteUZhdm9yaXRlTnVtYmVyOiBzdHJpbmd8IG51bWJlcjtcblxuXG5cbmxldCByb3NlRmF2b3JpdGVOdW1iZXI6IEZhdm9yaXRlTnVtYmVyO1xuXG4vLyDnsbvlnovliKvlkI3lnKjlvojlpJrmg4XlhrXkuIvlj6/ku6XlkoxpbnRlcmZhY2Ug5LqS5o2iXG4vL1xuXG4vLyDnsbvlnovliKvlkI0gLOi/meenjeaXoOazleiiq2ludGVyZmFjZeabv+aNoiBcbnR5cGUgRmF2b3JpdGVOdW1iZXIgPSBzdHJpbmd8IG51bWJlcjtcblxuXG4vLyB1bnRpbGl0eSB0eXBlIOeahOeUqOazle+8miDnlKjms5vlnovnu5nlroPkvKDlhaXkuIDkuKrlhbbku5bnsbvlnovvvIznhLblkI51dGlsaXR5IHR5cGUg5a+56L+Z5Liq57G75Z6L6L+b6KGM5p+Q56eN5pON5L2cXG50eXBlIHR5cGUgPSBQYXJhbWV0ZXJzPHR5cGVvZiBodHRwPlxuXG5cbnR5cGUgUGVyc29uID0ge1xuICBuYW1lOiBzdHJpbmcsXG4gIGFnZTogbnVtYmVyXG59XG50eXBlIFBlcnNvbjIgPSBPbWl0PE9taXQ8UGVyc29uLCAnYWdlJz4sICduYW1lJz47XG50eXBlIFBlcnNvbjMgPSBPbWl0PFBlcnNvbiwgJ2FnZScgfCAnbmFtZSc+O1xuXG5jb25zdCB4aWFvTWluZzogUGFydGlhbDxQZXJzb24+ID0ge25hbWU6IFwieGlhb21pbmdcIn1cbmNvbnN0IHNoZW5NaVJlbjogUGVyc29uMiA9IHtuYW1lOiBcIjEyM1wifTtcblxuXG5cblxuXG4vLyBQYXJ0aWFs55qE5a6e546wXG5cbi8vIOaEj+S5iSBQZXJzb25LZXlzID0gJ25hbWUnIHwgJ2FnZSdcbnR5cGUgUGVyc29uS2V5cyA9IGtleW9mIFBlcnNvbjsgIFxudHlwZSBQYXJ0aWFsPFQ+ID0ge1xuICBbUCBpbiBrZXlvZiBUXT86IFRbUF07XG4gIC8vIOmBjeWOhiBUIOeahOaJgOacieWxnuaAp++8jOW5tuS4lOaKiuWug+S7rOeahOWAvOi1i+e7meS4gOS4quaWsOeahOWAvFxufVxuXG5cblxuLy8gUGlja+eahOWunueOsFxudHlwZSBQaWNrPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IHtcbiAgW1AgaW4gS106IFRbUF07XG59XG5cbi8vIEV4Y2x1ZGXnmoTlrp7njrBcbi8vIOWwhlTnmoTmr4/kuKrlsZ7mgKfpgY3ljobvvIzlpoLmnpzkuI3lnKhV5Lit77yM5bCx6L+U5ZueXG50eXBlIEV4Y2x1ZGU8VCwgVT4gPSBUIGV4dGVuZHMgVSA/IG5ldmVyIDogVDtcblxuXG4vLyBFeHRyYWN055qE5a6e546wXG50eXBlIEV4dHJhY3Q8VCwgVT4gPSBUIGV4dGVuZHMgVSA/IFQgOiBuZXZlcjtcblxuLy8gT21pdOeahOWunueOsFxudHlwZSBPbWl0PFQsIEsgZXh0ZW5kcyBrZXlvZiBhbnk+ID0gUGljazxULCBFeGNsdWRlPGtleW9mIFQsIEs+PjtcblxuXG5cbiIsIi8qKlxuICog5Zyo5pys5Zyw5a+55o6S5bqP6L+b6KGM5LmQ6KeC5pu05pawXG4gKiBAcGFyYW0gZnJvbUlkIOimgeaOkuW6j+eahOmhueebrueahGlkXG4gKiBAcGFyYW0gdHlwZSAnYmVmb3JlJyB8ICdhZnRlcidcbiAqIEBwYXJhbSByZWZlcmVuY2VJZCDlj4LnhadpZFxuICogQHBhcmFtIGxpc3Qg6KaB5o6S5bqP55qE5YiX6KGoLCDmr5TlpoJ0YXNrcywga2FuYmFuc1xuICovXG5leHBvcnQgY29uc3QgcmVvcmRlciA9ICh7XG4gIGZyb21JZCxcbiAgdHlwZSxcbiAgcmVmZXJlbmNlSWQsXG4gIGxpc3QsXG59OiB7XG4gIGxpc3Q6IHsgaWQ6IG51bWJlciB9W107XG4gIGZyb21JZDogbnVtYmVyO1xuICB0eXBlOiBcImFmdGVyXCIgfCBcImJlZm9yZVwiO1xuICByZWZlcmVuY2VJZDogbnVtYmVyO1xufSkgPT4ge1xuICBjb25zdCBjb3BpZWRMaXN0ID0gWy4uLmxpc3RdO1xuICAvLyDmib7liLBmcm9tSWTlr7nlupTpobnnm67nmoTkuIvmoIdcbiAgY29uc3QgbW92aW5nSXRlbUluZGV4ID0gY29waWVkTGlzdC5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IGZyb21JZCk7XG4gIGlmICghcmVmZXJlbmNlSWQpIHtcbiAgICByZXR1cm4gaW5zZXJ0QWZ0ZXIoWy4uLmNvcGllZExpc3RdLCBtb3ZpbmdJdGVtSW5kZXgsIGNvcGllZExpc3QubGVuZ3RoIC0gMSk7XG4gIH1cbiAgY29uc3QgdGFyZ2V0SW5kZXggPSBjb3BpZWRMaXN0LmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gcmVmZXJlbmNlSWQpO1xuICBjb25zdCBpbnNlcnQgPSB0eXBlID09PSBcImFmdGVyXCIgPyBpbnNlcnRBZnRlciA6IGluc2VydEJlZm9yZTtcbiAgcmV0dXJuIGluc2VydChbLi4uY29waWVkTGlzdF0sIG1vdmluZ0l0ZW1JbmRleCwgdGFyZ2V0SW5kZXgpO1xufTtcblxuLyoqXG4gKiDlnKhsaXN05Lit77yM5oqKZnJvbeaUvuWcqHRv55qE5YmN6L65XG4gKiBAcGFyYW0gbGlzdFxuICogQHBhcmFtIGZyb21cbiAqIEBwYXJhbSB0b1xuICovXG5jb25zdCBpbnNlcnRCZWZvcmUgPSAobGlzdDogdW5rbm93bltdLCBmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+IHtcbiAgY29uc3QgdG9JdGVtID0gbGlzdFt0b107XG4gIGNvbnN0IHJlbW92ZWRJdGVtID0gbGlzdC5zcGxpY2UoZnJvbSwgMSlbMF07XG4gIGNvbnN0IHRvSW5kZXggPSBsaXN0LmluZGV4T2YodG9JdGVtKTtcbiAgbGlzdC5zcGxpY2UodG9JbmRleCwgMCwgcmVtb3ZlZEl0ZW0pO1xuICByZXR1cm4gbGlzdDtcbn07XG5cbi8qKlxuICog5ZyobGlzdOS4re+8jOaKimZyb23mlL7lnKh0b+eahOWQjumdolxuICogQHBhcmFtIGxpc3RcbiAqIEBwYXJhbSBmcm9tXG4gKiBAcGFyYW0gdG9cbiAqL1xuY29uc3QgaW5zZXJ0QWZ0ZXIgPSAobGlzdDogdW5rbm93bltdLCBmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+IHtcbiAgY29uc3QgdG9JdGVtID0gbGlzdFt0b107XG4gIGNvbnN0IHJlbW92ZWRJdGVtID0gbGlzdC5zcGxpY2UoZnJvbSwgMSlbMF07XG4gIGNvbnN0IHRvSW5kZXggPSBsaXN0LmluZGV4T2YodG9JdGVtKTtcbiAgbGlzdC5zcGxpY2UodG9JbmRleCArIDEsIDAsIHJlbW92ZWRJdGVtKTtcbiAgcmV0dXJuIGxpc3Q7XG59O1xuIiwiaW1wb3J0IHsgUXVlcnlLZXksIHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyByZW9yZGVyIH0gZnJvbSBcIi4vcmVvcmRlclwiO1xuaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuLi90eXBlcy90YXNrXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VDb25maWcgPSAoXG4gIHF1ZXJ5S2V5OiBRdWVyeUtleSxcbiAgY2FsbGJhY2s6ICh0YXJnZXQ6IGFueSwgb2xkPzogYW55W10pID0+IGFueVtdXG4pID0+IHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICByZXR1cm4ge1xuICAgIG9uU3VjY2VzczogKCkgPT4gcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMocXVlcnlLZXkpLFxuICAgIGFzeW5jIG9uTXV0YXRlKHRhcmdldDogYW55KSB7XG4gICAgICBjb25zdCBwcmV2aW91c0l0ZW1zID0gcXVlcnlDbGllbnQuZ2V0UXVlcnlEYXRhKHF1ZXJ5S2V5KTtcbiAgICAgIHF1ZXJ5Q2xpZW50LnNldFF1ZXJ5RGF0YShxdWVyeUtleSwgKG9sZD86IGFueVtdKSA9PiB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayh0YXJnZXQsIG9sZCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7IHByZXZpb3VzSXRlbXMgfTtcbiAgICB9LFxuICAgIG9uRXJyb3IoZXJyb3I6IGFueSwgbmV3SXRlbTogYW55LCBjb250ZXh0OiBhbnkpIHtcbiAgICAgIHF1ZXJ5Q2xpZW50LnNldFF1ZXJ5RGF0YShxdWVyeUtleSwgY29udGV4dC5wcmV2aW91c0l0ZW1zKTtcbiAgICB9LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZURlbGV0ZUNvbmZpZyA9IChxdWVyeUtleTogUXVlcnlLZXkpID0+XG4gIHVzZUNvbmZpZyhcbiAgICBxdWVyeUtleSxcbiAgICAodGFyZ2V0LCBvbGQpID0+IG9sZD8uZmlsdGVyKChpdGVtKSA9PiBpdGVtLmlkICE9PSB0YXJnZXQuaWQpIHx8IFtdXG4gICk7XG5leHBvcnQgY29uc3QgdXNlRWRpdENvbmZpZyA9IChxdWVyeUtleTogUXVlcnlLZXkpID0+XG4gIHVzZUNvbmZpZyhcbiAgICBxdWVyeUtleSxcbiAgICAodGFyZ2V0LCBvbGQpID0+XG4gICAgICBvbGQ/Lm1hcCgoaXRlbSkgPT5cbiAgICAgICAgaXRlbS5pZCA9PT0gdGFyZ2V0LmlkID8geyAuLi5pdGVtLCAuLi50YXJnZXQgfSA6IGl0ZW1cbiAgICAgICkgfHwgW11cbiAgKTtcbmV4cG9ydCBjb25zdCB1c2VBZGRDb25maWcgPSAocXVlcnlLZXk6IFF1ZXJ5S2V5KSA9PlxuICB1c2VDb25maWcocXVlcnlLZXksICh0YXJnZXQsIG9sZCkgPT4gKG9sZCA/IFsuLi5vbGQsIHRhcmdldF0gOiBbXSkpO1xuXG5leHBvcnQgY29uc3QgdXNlUmVvcmRlckthbmJhbkNvbmZpZyA9IChxdWVyeUtleTogUXVlcnlLZXkpID0+XG4gIHVzZUNvbmZpZyhxdWVyeUtleSwgKHRhcmdldCwgb2xkKSA9PiByZW9yZGVyKHsgbGlzdDogb2xkLCAuLi50YXJnZXQgfSkpO1xuXG5leHBvcnQgY29uc3QgdXNlUmVvcmRlclRhc2tDb25maWcgPSAocXVlcnlLZXk6IFF1ZXJ5S2V5KSA9PlxuICB1c2VDb25maWcocXVlcnlLZXksICh0YXJnZXQsIG9sZCkgPT4ge1xuICAgIGNvbnN0IG9yZGVyZWRMaXN0ID0gcmVvcmRlcih7IGxpc3Q6IG9sZCwgLi4udGFyZ2V0IH0pIGFzIFRhc2tbXTtcbiAgICByZXR1cm4gb3JkZXJlZExpc3QubWFwKChpdGVtKSA9PlxuICAgICAgaXRlbS5pZCA9PT0gdGFyZ2V0LmZyb21JZFxuICAgICAgICA/IHsgLi4uaXRlbSwga2FuYmFuSWQ6IHRhcmdldC50b0thbmJhbklkIH1cbiAgICAgICAgOiBpdGVtXG4gICAgKTtcbiAgfSk7XG4iLCJpbXBvcnQgeyB1c2VIdHRwIH0gZnJvbSBcIi4vLi4vdXRpbHMvaHR0cFwiO1xuaW1wb3J0IHsgUXVlcnlLZXksIHVzZU11dGF0aW9uLCB1c2VRdWVyeSB9IGZyb20gXCJyZWFjdC1xdWVyeVwiO1xuaW1wb3J0IHtcbiAgdXNlQWRkQ29uZmlnLFxuICB1c2VEZWxldGVDb25maWcsXG4gIHVzZUVkaXRDb25maWcsXG59IGZyb20gXCIuLy4uL3V0aWxzL3VzZS1vcHRpbWlzdGljLW9wdGlvbnNcIjtcbmltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi8uLi90eXBlcy9wcm9qZWN0XCI7XG5pbXBvcnQgeyBjbGVhbk9iamVjdCB9IGZyb20gXCIuLy4uL3V0aWxzL2luZGV4XCI7XG5cbmV4cG9ydCBjb25zdCB1c2VQcm9qZWN0cyA9IChwYXJhbT86IFBhcnRpYWw8UHJvamVjdD4pID0+IHtcbiAgY29uc3QgY2xpZW50ID0gdXNlSHR0cCgpO1xuXG4gIHJldHVybiB1c2VRdWVyeTxQcm9qZWN0W10+KFtcInByb2plY3RzXCIsIGNsZWFuT2JqZWN0KHBhcmFtKV0sICgpID0+XG4gICAgY2xpZW50KFwicHJvamVjdHNcIiwgeyBkYXRhOiBwYXJhbSB9KVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUVkaXRQcm9qZWN0ID0gKHF1ZXJ5S2V5OiBRdWVyeUtleSkgPT4ge1xuICBjb25zdCBjbGllbnQgPSB1c2VIdHRwKCk7XG4gIHJldHVybiB1c2VNdXRhdGlvbihcbiAgICAocGFyYW1zOiBQYXJ0aWFsPFByb2plY3Q+KSA9PlxuICAgICAgY2xpZW50KGBwcm9qZWN0cy8ke3BhcmFtcy5pZH1gLCB7XG4gICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICBkYXRhOiBwYXJhbXMsXG4gICAgICB9KSxcbiAgICB1c2VFZGl0Q29uZmlnKHF1ZXJ5S2V5KVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUFkZFByb2plY3QgPSAocXVlcnlLZXk6IFF1ZXJ5S2V5KSA9PiB7XG4gIGNvbnN0IGNsaWVudCA9IHVzZUh0dHAoKTtcblxuICByZXR1cm4gdXNlTXV0YXRpb24oXG4gICAgKHBhcmFtczogUGFydGlhbDxQcm9qZWN0PikgPT5cbiAgICAgIGNsaWVudChgcHJvamVjdHNgLCB7XG4gICAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIH0pLFxuICAgIHVzZUFkZENvbmZpZyhxdWVyeUtleSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VEZWxldGVQcm9qZWN0ID0gKHF1ZXJ5S2V5OiBRdWVyeUtleSkgPT4ge1xuICBjb25zdCBjbGllbnQgPSB1c2VIdHRwKCk7XG5cbiAgcmV0dXJuIHVzZU11dGF0aW9uKFxuICAgICh7IGlkIH06IHsgaWQ6IG51bWJlciB9KSA9PlxuICAgICAgY2xpZW50KGBwcm9qZWN0cy8ke2lkfWAsIHtcbiAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgfSksXG4gICAgdXNlRGVsZXRlQ29uZmlnKHF1ZXJ5S2V5KVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZVByb2plY3QgPSAoaWQ/OiBudW1iZXIpID0+IHtcbiAgY29uc3QgY2xpZW50ID0gdXNlSHR0cCgpO1xuICByZXR1cm4gdXNlUXVlcnk8UHJvamVjdD4oXG4gICAgW1wicHJvamVjdFwiLCB7IGlkIH1dLFxuICAgICgpID0+IGNsaWVudChgcHJvamVjdHMvJHtpZH1gKSxcbiAgICB7XG4gICAgICBlbmFibGVkOiBCb29sZWFuKGlkKSxcbiAgICB9XG4gICk7XG59O1xuIiwiaW1wb3J0IHsgVVJMU2VhcmNoUGFyYW1zSW5pdCwgdXNlU2VhcmNoUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjbGVhbk9iamVjdCwgc3Vic2V0IH0gZnJvbSBcIi4vaW5kZXhcIjtcblxuLyoqXG4gKiDov5Tlm57pobXpnaJ1cmzkuK3vvIzmjIflrprplK7nmoTlj4LmlbDlgLxcbiAqL1xuIGV4cG9ydCBjb25zdCB1c2VVcmxRdWVyeVBhcmFtID0gPEsgZXh0ZW5kcyBzdHJpbmc+KGtleXM6IEtbXSkgPT4ge1xuICBjb25zdCBbc2VhcmNoUGFyYW1zXSA9IHVzZVNlYXJjaFBhcmFtcygpO1xuICBjb25zdCBzZXRTZWFyY2hQYXJhbXMgPSB1c2VTZXRVcmxTZWFyY2hQYXJhbSgpO1xuICBjb25zdCBbc3RhdGVLZXlzXSA9IHVzZVN0YXRlKGtleXMpO1xuICByZXR1cm4gW1xuICAgIHVzZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICBzdWJzZXQoT2JqZWN0LmZyb21FbnRyaWVzKHNlYXJjaFBhcmFtcyksIHN0YXRlS2V5cykgYXMge1xuICAgICAgICAgIFtrZXkgaW4gS106IHN0cmluZztcbiAgICAgICAgfSxcbiAgICAgIFtzZWFyY2hQYXJhbXMsIHN0YXRlS2V5c11cbiAgICApLFxuICAgIChwYXJhbXM6IFBhcnRpYWw8eyBba2V5IGluIEtdOiB1bmtub3duIH0+KSA9PiB7XG4gICAgICByZXR1cm4gc2V0U2VhcmNoUGFyYW1zKHBhcmFtcyk7XG4gICAgICAvLyBpdGVyYXRvclxuICAgICAgLy8gaXRlcmF0b3I6IGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy91cGJlYXQtd29vZC1idW0zaj9maWxlPS9zcmMvaW5kZXguanNcbiAgICB9LFxuICBdIGFzIGNvbnN0O1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZVNldFVybFNlYXJjaFBhcmFtID0gKCkgPT4ge1xuICBjb25zdCBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbV0gPSB1c2VTZWFyY2hQYXJhbXMoKTtcbiAgcmV0dXJuIChwYXJhbXM6IHsgW2tleSBpbiBzdHJpbmddOiB1bmtub3duIH0pID0+IHtcbiAgICBjb25zdCBvID0gY2xlYW5PYmplY3Qoe1xuICAgICAgLi4uT2JqZWN0LmZyb21FbnRyaWVzKHNlYXJjaFBhcmFtcyksXG4gICAgICAuLi5wYXJhbXMsXG4gICAgfSkgYXMgVVJMU2VhcmNoUGFyYW1zSW5pdDtcbiAgICByZXR1cm4gc2V0U2VhcmNoUGFyYW0obyk7XG4gIH07XG59O1xuIiwiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VTZWFyY2hQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXG5pbXBvcnQgeyB1c2VQcm9qZWN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3Byb2plY3RcIlxuaW1wb3J0IHsgdXNlU2V0VXJsU2VhcmNoUGFyYW0sIHVzZVVybFF1ZXJ5UGFyYW0gfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXJsXCJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmV4cG9ydCBjb25zdCB1c2VQcm9qZWN0TW9kYWwgPSBmdW5jdGlvbigpeyAgXG4gIGNvbnN0IFt7cHJvamVjdENyZWF0ZX0sICBzZXRQcm9qZWN0Q3JlYXRlXSA9IHVzZVVybFF1ZXJ5UGFyYW0oWydwcm9qZWN0Q3JlYXRlJ10pXG4gIGNvbnN0IFt7ZWRpdGluZ1Byb2plY3RJZH0sIHNldEVkaXRQcm9qZWN0SWRdID0gdXNlVXJsUXVlcnlQYXJhbShbJ2VkaXRpbmdQcm9qZWN0SWQnXSlcbiAgY29uc3QgW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1dID0gdXNlU2VhcmNoUGFyYW1zKCk7XG4gIGNvbnN0IHtkYXRhOiBlZGl0aW5nUHJvamVjdCwgaXNMb2FkaW5nfSA9IHVzZVByb2plY3QoZWRpdGluZ1Byb2plY3RJZCApXG4gIGNvbnN0IHNldFVybFBhcmFtcyA9IHVzZVNldFVybFNlYXJjaFBhcmFtKCk7XG4gIGNvbnN0IG9wZW4gPSAoKSA9PntcbiAgICBzZXRQcm9qZWN0Q3JlYXRlKHtwcm9qZWN0Q3JlYXRlOiB0cnVlfSlcbiAgfTtcbiAgY29uc3QgY2xvc2UgPSAoKT0+e1xuICAgIFxuICAgIHNldFVybFBhcmFtcyh7cHJvamVjdENyZWF0ZTogJycsIGVkaXRpbmdQcm9qZWN0SWQ6ICcnfSlcbiAgICAvLyBzZXRTZWFyY2hQYXJhbShwcm9qZWN0Q3JlYXRlLCB7c3RhdGU6IGZhbHNlfSlcbiAgICAvLyBzZXRTZWFyY2hQYXJhbShlZGl0aW5nUHJvamVjdElkLCB7c3RhdGU6IDIyMn0pXG4gICAgLy8gc2V0RWRpdFByb2plY3RJZCh7ZWRpdGluZ1Byb2plY3RJZDogJyd9KVxuICAgIC8vIHNldFByb2plY3RDcmVhdGUoe3Byb2plY3RDcmVhdGU6ICcnfSlcbiAgfVxuICAvLyBjb25zdCBjbG9zZSA9ICgpID0+IHNldFVybFBhcmFtcyh7IHByb2plY3RDcmVhdGU6IFwiXCIsIGVkaXRpbmdQcm9qZWN0SWQ6IFwiXCIgfSk7XG4gIGNvbnN0IHN0YXJ0RWRpdCA9IChpZDogbnVtYmVyKT0+IHNldEVkaXRQcm9qZWN0SWQoe2VkaXRpbmdQcm9qZWN0SWQ6IGlkfSlcbiAgcmV0dXJuIHtcbiAgICBwcm9qZWN0TW9kYWxPcGVuOiBwcm9qZWN0Q3JlYXRlID09PSBcInRydWVcIiB8fCBCb29sZWFuKGVkaXRpbmdQcm9qZWN0SWQpLFxuICAgIG9wZW4sXG4gICAgY2xvc2UsXG4gICAgc3RhcnRFZGl0LFxuICAgIGVkaXRpbmdQcm9qZWN0LFxuICAgIGlzTG9hZGluZyxcbiAgfTtcbn1cbmV4cG9ydCBjb25zdCB1c2VQcm9qZWN0c1NlYXJjaFBhcmFtcyA9ICgpID0+IHtcbiAgY29uc3QgW3BhcmFtLCBzZXRQYXJhbV0gPSB1c2VVcmxRdWVyeVBhcmFtKFtcIm5hbWVcIiwgXCJwZXJzb25JZFwiXSk7XG4gIHJldHVybiBbXG4gICAgdXNlTWVtbyhcbiAgICAgICgpID0+ICh7IC4uLnBhcmFtLCBwZXJzb25JZDogKHBhcmFtLnBlcnNvbklkKSB8fCB1bmRlZmluZWQgfSksXG4gICAgICBbcGFyYW1dXG4gICAgKSxcbiAgICBzZXRQYXJhbSxcbiAgXSBhcyBjb25zdDtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VQcm9qZWN0c1F1ZXJ5S2V5ID0gKCk9PntcbiAgY29uc3QgW3BhcmFtc10gPSB1c2VQcm9qZWN0c1NlYXJjaFBhcmFtcygpO1xuICByZXR1cm4gWydwcm9qZWN0cycsIHBhcmFtc11cbn0iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEJ1dHRvbiwgRGl2aWRlciwgTGlzdCwgUG9wb3ZlciwgVHlwb2dyYXBoeSB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VQcm9qZWN0TW9kYWwgfSBmcm9tIFwiLi4vc2NyZWVucy9wcm9qZWN0LWxpc3QvdXRpbFwiO1xuaW1wb3J0IHsgdXNlUHJvamVjdHMgfSBmcm9tIFwiLi4vdXRpbHMvcHJvamVjdFwiO1xuaW1wb3J0IHsgQnV0dG9uTm9QYWRkaW5nIH0gZnJvbSBcIi4vbGliXCI7XG5cbmZ1bmN0aW9uIFByb2plY3RQb3BvdmVyKCkge1xuICBjb25zdCB7IGRhdGE6IHByb2plY3RzLCBpc0xvYWRpbmcsIHJlZmV0Y2ggfSA9IHVzZVByb2plY3RzKCk7XG4gIGNvbnN0IHBpbm5lZFByb2plY3RzID0gcHJvamVjdHM/LmZpbHRlcigocHJvamVjdCkgPT4gcHJvamVjdC5waW4pO1xuXG4gIGNvbnN0IHsgb3BlbiB9ID0gdXNlUHJvamVjdE1vZGFsKCk7XG4gIGNvbnN0IGNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxDb250ZW50Q29udGFpbmVyPlxuICAgICAgICA8VHlwb2dyYXBoeS5UZXh0IHR5cGU9XCJzZWNvbmRhcnlcIj7mlLbol4/pobnnm648L1R5cG9ncmFwaHkuVGV4dD5cbiAgICAgICAgPExpc3Q+XG4gICAgICAgICAge3Bpbm5lZFByb2plY3RzPy5tYXAoKHByb2plY3QpID0+IChcbiAgICAgICAgICAgIDxMaXN0Lkl0ZW0ga2V5PXtwcm9qZWN0LmlkfT5cbiAgICAgICAgICAgICAgPExpc3QuSXRlbS5NZXRhIHRpdGxlPXtwcm9qZWN0Lm5hbWV9IC8+XG4gICAgICAgICAgICA8L0xpc3QuSXRlbT5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9MaXN0PlxuICAgICAgICA8RGl2aWRlcj48L0RpdmlkZXI+XG4gICAgICAgIDxCdXR0b25Ob1BhZGRpbmcgdHlwZT1cImxpbmtcIiBvbkNsaWNrPXsoKSA9PiBvcGVuKCl9PlxuICAgICAgICAgIOWIm+W7uumhueebrlxuICAgICAgICA8L0J1dHRvbk5vUGFkZGluZz5cbiAgICAgIDwvQ29udGVudENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuICBjb25zdCBDb250ZW50Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBtaW4td2lkdGg6IDE1cmVtO1xuICBgO1xuICByZXR1cm4gKFxuICAgIDxQb3BvdmVyXG4gICAgICBwbGFjZW1lbnQ9e1wiYm90dG9tXCJ9XG4gICAgICBvblZpc2libGVDaGFuZ2U9eygpID0+IHJlZmV0Y2goKX1cbiAgICAgIGNvbnRlbnQ9e2NvbnRlbnR9XG4gICAgPlxuICAgICAgPGgyPumhueebrjwvaDI+XG4gICAgPC9Qb3BvdmVyPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9qZWN0UG9wb3ZlcjtcbiIsImltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vdHlwZXMvdXNlclwiO1xuaW1wb3J0IHsgdXNlSHR0cCB9IGZyb20gXCIuL2h0dHBcIjtcbmltcG9ydCB7IGNsZWFuT2JqZWN0IH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XG5leHBvcnQgY29uc3QgdXNlVXNlcnMgPSBmdW5jdGlvbiAocGFyYW1zPzogUGFydGlhbDxVc2VyPikge1xuICBjb25zdCBjbGllbnQgPSB1c2VIdHRwKCk7XG5cbiAgcmV0dXJuIHVzZVF1ZXJ5PFVzZXJbXT4oW1widXNlcnNcIiwgcGFyYW1zXSwgKCkgPT4ge1xuICAgIHJldHVybiBjbGllbnQoXCJ1c2Vyc1wiLCB7IGRhdGE6IGNsZWFuT2JqZWN0KHBhcmFtcyB8fCB7fSkgfSk7XG4gIH0pO1xufTtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgQnV0dG9uLCBEaXZpZGVyLCBMaXN0LCBQb3BvdmVyLCBUeXBvZ3JhcGh5IH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVVzZXJzIH0gZnJvbSBcIi4uL3V0aWxzL3VzZXJcIjtcblxuaW1wb3J0IHsgQnV0dG9uTm9QYWRkaW5nIH0gZnJvbSBcIi4vbGliXCI7XG5cbmZ1bmN0aW9uIFVzZXJQb3BvdmVyKCkge1xuICBjb25zdCB7IGRhdGE6IHVzZXJzLCBpc0xvYWRpbmcsIHJlZmV0Y2ggfSA9IHVzZVVzZXJzKCk7XG5cbiAgY29uc3QgY29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDxUeXBvZ3JhcGh5LlRleHQgdHlwZT1cInNlY29uZGFyeVwiPue7hOWRmDwvVHlwb2dyYXBoeS5UZXh0PlxuICAgICAgICA8TGlzdD5cbiAgICAgICAgICB7dXNlcnM/Lm1hcCgodXNlcikgPT4gKFxuICAgICAgICAgICAgPExpc3QuSXRlbSBrZXk9e3VzZXIuaWR9PlxuICAgICAgICAgICAgICA8TGlzdC5JdGVtLk1ldGEgdGl0bGU9e3VzZXIubmFtZX0gLz5cbiAgICAgICAgICAgIDwvTGlzdC5JdGVtPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L0xpc3Q+XG4gICAgICAgXG4gICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgKTtcbiAgfTtcbiAgY29uc3QgQ29udGVudENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gICAgbWluLXdpZHRoOiAxNXJlbTtcbiAgYDtcbiAgcmV0dXJuIChcbiAgICA8UG9wb3ZlclxuICAgICAgcGxhY2VtZW50PXtcImJvdHRvbVwifVxuICAgICAgb25WaXNpYmxlQ2hhbmdlPXsoKSA9PiByZWZldGNoKCl9XG4gICAgICBjb250ZW50PXtjb250ZW50fVxuICAgID5cbiAgICAgIDxoMj7nu4TlkZg8L2gyPlxuICAgIDwvUG9wb3Zlcj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlclBvcG92ZXI7XG4iLCJcblxuaW1wb3J0IHsgUXVlcnlLZXksIHVzZU11dGF0aW9uLCB1c2VRdWVyeSwgdXNlUXVlcnlDbGllbnQgfSBmcm9tIFwicmVhY3QtcXVlcnlcIjtcbmltcG9ydCB7IEVwaWMgfSBmcm9tIFwiLi4vdHlwZXMvZXBpY1wiO1xuaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuLi90eXBlcy90YXNrXCI7XG5pbXBvcnQgeyB1c2VIdHRwIH0gZnJvbSBcIi4vaHR0cFwiO1xuaW1wb3J0IHsgdXNlQWRkQ29uZmlnLCB1c2VEZWxldGVDb25maWcsIHVzZUVkaXRDb25maWcgfSBmcm9tIFwiLi91c2Utb3B0aW1pc3RpYy1vcHRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VFcGljcyA9IChwYXJhbXM/OiBQYXJ0aWFsPEVwaWM+KSA9PiB7XG4gIGNvbnN0IGNsaWVudCA9IHVzZUh0dHAoKTtcblxuICByZXR1cm4gdXNlUXVlcnk8RXBpY1tdPihbXCJlcGljc1wiLCBwYXJhbXNdLCAoKSA9PiB7XG4gICAgcmV0dXJuIGNsaWVudChcImVwaWNzXCIsIHsgZGF0YTogcGFyYW1zIH0pO1xuICB9KTtcbn07XG5leHBvcnQgY29uc3QgdXNlQWRkRXBpYyA9IChxdWVyeUtleTogUXVlcnlLZXkpID0+IHtcbiAgY29uc3QgY2xpZW50ID0gdXNlSHR0cCgpO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIC8vIGNvbnNvbGUubG9nKCfmm7TmlrDliY0nLHF1ZXJ5Q2xpZW50LmdldFF1ZXJ5RGF0YShxdWVyeUtleSkpO1xuICByZXR1cm4gdXNlTXV0YXRpb24oXG4gICAgKHBhcmFtczogUGFydGlhbDxFcGljPikgPT5cbiAgICAgIGNsaWVudChgZXBpY3NgLCB7XG4gICAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIH0pLFxuICAgIHVzZUFkZENvbmZpZyhxdWVyeUtleSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VEZWxldGVFcGljID0gKHF1ZXJ5S2V5OiBRdWVyeUtleSkgPT57XG4gIGNvbnN0IGNsaWVudCA9IHVzZUh0dHAoKTtcbiAgcmV0dXJuIHVzZU11dGF0aW9uKFxuICAgICh7aWR9OiB7aWQ6IG51bWJlcn0pPT57XG4gICAgICByZXR1cm4gY2xpZW50KGBlcGljcy8ke2lkfWAsIHttZXRob2Q6ICdERUxFVEUnfSlcbiAgICB9LFxuICAgIHVzZURlbGV0ZUNvbmZpZyhxdWVyeUtleSlcbiAgKVxufVxuXG5cblxuZXhwb3J0IGNvbnN0IHVzZUFkZFRhc2sgPSAocXVlcnlLZXk6IFF1ZXJ5S2V5KSA9PntcbiAgY29uc3QgY2xpZW50ID0gdXNlSHR0cCgpO1xuICByZXR1cm4gdXNlTXV0YXRpb24oKHBhcmFtOiBQYXJ0aWFsPFRhc2s+KT0+e1xuICAgIHJldHVybiBjbGllbnQoJ3Rhc2tzJywge1xuICAgICAgZGF0YTogcGFyYW0sXG4gICAgICBtZXRob2Q6ICdQT1NUJ1xuICAgIH0sXG4gICAgKVxuICB9LCB1c2VBZGRDb25maWcocXVlcnlLZXkpKVxufVxuXG4iLCJpbXBvcnQgeyBRdWVyeUtleSwgdXNlTXV0YXRpb24sIHVzZVF1ZXJ5IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyB1c2VEZWJvdW5jZSB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tcIjtcbmltcG9ydCB7IHVzZUh0dHAgfSBmcm9tIFwiLi9odHRwXCI7XG5pbXBvcnQgeyBTb3J0UHJvcHMgfSBmcm9tIFwiLi9rYW5iYW5cIjtcbmltcG9ydCB7IHVzZURlbGV0ZUNvbmZpZywgdXNlRWRpdENvbmZpZywgdXNlUmVvcmRlclRhc2tDb25maWcgfSBmcm9tIFwiLi91c2Utb3B0aW1pc3RpYy1vcHRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VUYXNrcyA9IChwYXJhbT86IFBhcnRpYWw8VGFzaz4pPT57XG4gIGNvbnN0IGNsaWVudCA9IHVzZUh0dHAoKTtcbiAgY29uc3QgZGVib3VuY2VkUGFyYW0gPSB7IC4uLnBhcmFtLCBuYW1lOiB1c2VEZWJvdW5jZShwYXJhbT8ubmFtZSwgMjAwKSB9O1xuXG4gIHJldHVybiB1c2VRdWVyeTxUYXNrW10+KFtcInRhc2tzXCIsIGRlYm91bmNlZFBhcmFtXSwgKCkgPT5cbiAgICBjbGllbnQoXCJ0YXNrc1wiLCB7IGRhdGE6IGRlYm91bmNlZFBhcmFtIH0pXG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCB1c2VUYXNrID0gKGlkPzogbnVtYmVyKSA9PntcbiAgY29uc3QgY2xpZW50ID0gdXNlSHR0cCgpO1xuICByZXR1cm4gdXNlUXVlcnk8VGFzaz4oWyd0YXNrJywge2lkfV0sICgpPT4gY2xpZW50KGB0YXNrcy8ke2lkfWApLHtcbiAgICBlbmFibGVkOiBCb29sZWFuKGlkKVxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgdXNlRWRpdFRhc2sgPSAocXVlcnlLZXk6IFF1ZXJ5S2V5KSA9PiB7XG4gIGNvbnN0IGNsaWVudCA9IHVzZUh0dHAoKTtcbiAgcmV0dXJuIHVzZU11dGF0aW9uKChwYXJhbXM6IFBhcnRpYWw8VGFzaz4pPT57XG4gICAgcmV0dXJuIGNsaWVudChgdGFza3MvJHtwYXJhbXMuaWR9YCwge2RhdGE6IHBhcmFtcywgbWV0aG9kOiAnUEFUQ0gnfSwpXG4gIH0sIHVzZUVkaXRDb25maWcocXVlcnlLZXkgKSApXG59XG5cbmV4cG9ydCBjb25zdCB1c2VEZWxldGVUYXNrID0gKHF1ZXJ5S2V5OiBRdWVyeUtleSkgPT4ge1xuICBjb25zdCBjbGllbnQgPSB1c2VIdHRwKCk7XG4gIHJldHVybiB1c2VNdXRhdGlvbihcbiAgICAoe2lkfToge2lkOm51bWJlcn0pPT57XG4gICAgICByZXR1cm4gY2xpZW50KGB0YXNrcy8ke2lkfWAsIHttZXRob2Q6ICdERUxFVEUnfSlcbiAgICB9LFxuICAgIHVzZURlbGV0ZUNvbmZpZyhxdWVyeUtleSlcbiAgKVxufVxuXG5cbmV4cG9ydCBjb25zdCB1c2VSZW9yZGVyVGFzayA9IChxdWVyeUtleTogUXVlcnlLZXkpID0+e1xuICBjb25zdCBjbGllbnQgPSB1c2VIdHRwKCk7XG4gIHJldHVybiB1c2VNdXRhdGlvbihcbiAgICAocGFyYW1zOiBTb3J0UHJvcHMpID0+e1xuICAgICAgcmV0dXJuIGNsaWVudChgdGFza3MvcmVvcmRlcmAsIHtcbiAgICAgICAgZGF0YTogcGFyYW1zLFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiXG4gICAgICB9KVxuICAgIH0sXG4gICAgdXNlUmVvcmRlclRhc2tDb25maWcocXVlcnlLZXkpXG4gIClcbn0iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlTG9jYXRpb24gfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyB1c2VEZWJvdW5jZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgdXNlVGFzayB9IGZyb20gXCIuLi8uLi91dGlscy90YXNrXCI7XG5pbXBvcnQgeyB1c2VQcm9qZWN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3Byb2plY3RcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVVybFF1ZXJ5UGFyYW0gfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXJsXCI7XG5leHBvcnQgY29uc3QgdXNlUHJvamVjdElkVXJsID0gKCkgPT4ge1xuICBjb25zdCB7IHBhdGhuYW1lIH0gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBpZCA9IHBhdGhuYW1lLm1hdGNoKC9wcm9qZWN0c1xcLyhcXGQrKS8pPy5bMV07XG4gIHJldHVybiBOdW1iZXIoaWQpO1xufTtcbmV4cG9ydCBjb25zdCB1c2VQcm9qZWN0SW5VcmwgPSAoKSA9PiB1c2VQcm9qZWN0KHVzZVByb2plY3RJZFVybCgpKTtcblxuZXhwb3J0IGNvbnN0IHVzZUthbmJhblNlYXJjaFBhcmFtcyA9ICgpID0+IHtcbiAgcmV0dXJuIHsgcHJvamVjdElkOiB1c2VQcm9qZWN0SWRVcmwoKSB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUthbmJhblF1ZXJ5S2V5ID0gKCkgPT4gW1wia2FuYmFuc1wiLCB1c2VLYW5iYW5TZWFyY2hQYXJhbXMoKV07XG5cbmV4cG9ydCBjb25zdCB1c2VUYXNrc1NlYXJjaFBhcmFtcyA9ICgpID0+IHtcbiAgY29uc3QgcHJvamVjdElkID0gdXNlUHJvamVjdElkVXJsKCk7XG4gIGNvbnN0IFtwYXJhbSwgc2V0UGFyYW1dID0gdXNlVXJsUXVlcnlQYXJhbShbXG4gICAgXCJuYW1lXCIsXG4gICAgXCJ0eXBlSWRcIixcbiAgICBcInByb2Nlc3NvcklkXCIsXG4gICAgXCJ0YWdJZFwiLFxuICBdKTtcbiAgLy8gY29uc3QgZGVib3VuY2VkTmFtZSA9ICd0ZXN0JztcbiAgLy8gY29uc3QgZGVib3VuY2VkTmFtZSA9IHVzZURlYm91bmNlKHBhcmFtLm5hbWUsIDApO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2plY3RJZCxcbiAgICAgIHR5cGVJZDogTnVtYmVyKHBhcmFtLnR5cGVJZCkgfHwgdW5kZWZpbmVkLFxuICAgICAgcHJvY2Vzc29ySWQ6IE51bWJlcihwYXJhbS5wcm9jZXNzb3JJZCkgfHwgdW5kZWZpbmVkLFxuICAgICAgdGFnSWQ6IE51bWJlcihwYXJhbS50YWdJZCkgfHwgdW5kZWZpbmVkLFxuICAgICAgbmFtZTogcGFyYW0ubmFtZSAgfHwgdW5kZWZpbmVkLFxuICAgIH07XG4gIH0sIFtwcm9qZWN0SWQsIHBhcmFtXSk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlVGFza3NRdWVyeUtleSA9ICgpID0+IFtcInRhc2tzXCIsIHVzZVRhc2tzU2VhcmNoUGFyYW1zKCldO1xuXG5leHBvcnQgY29uc3QgdXNlVGFza3NNb2RhbCA9ICgpID0+IHtcbiAgY29uc3QgW3sgZWRpdGluZ1Rhc2tJZCB9LCBzZXRFZGl0aW5nVGFza0lkXSA9IHVzZVVybFF1ZXJ5UGFyYW0oW1xuICAgIFwiZWRpdGluZ1Rhc2tJZFwiLFxuICBdKTtcbiAgY29uc3QgeyBkYXRhOiBlZGl0aW5nVGFzaywgaXNMb2FkaW5nIH0gPSB1c2VUYXNrKE51bWJlcihlZGl0aW5nVGFza0lkKSk7XG4gIGNvbnN0IHN0YXJ0RWRpdCA9IHVzZUNhbGxiYWNrKFxuICAgIChpZDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcInRlc3RcIilcbiAgICAgIHNldEVkaXRpbmdUYXNrSWQoeyBlZGl0aW5nVGFza0lkOiBpZCB9KTtcbiAgICB9LFxuICAgIFtzZXRFZGl0aW5nVGFza0lkXVxuICApO1xuICBjb25zdCBjbG9zZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRFZGl0aW5nVGFza0lkKHsgZWRpdGluZ1Rhc2tJZDogXCJcIiB9KTtcbiAgfSwgW3NldEVkaXRpbmdUYXNrSWRdKTtcbiAgcmV0dXJuIHtcbiAgICBlZGl0aW5nVGFzayxcbiAgICBlZGl0aW5nVGFza0lkLFxuICAgIHN0YXJ0RWRpdCxcbiAgICBjbG9zZSxcbiAgICBpc0xvYWRpbmcsXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgdXNlUHJvamVjdElkVXJsLCB1c2VQcm9qZWN0SW5VcmwgfSBmcm9tIFwiLi4vS2FuYmFuL3V0aWxcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUVwaWNTZWFyY2hQYXJhbXMgPSAoKT0+ICh7cHJvamVjdElkOiB1c2VQcm9qZWN0SWRVcmwoKX0pO1xuXG5leHBvcnQgY29uc3QgdXNlRXBpY3NRdWVyeUtleSA9ICgpPT4gWydlcGljcycsIHVzZUVwaWNTZWFyY2hQYXJhbXMoKV07IiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgeyBCdXR0b24sIERyYXdlciwgRHJhd2VyUHJvcHMsIEZvcm0sIElucHV0IH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUFkZEVwaWMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvZXBpY1wiO1xuaW1wb3J0IHsgdXNlUHJvamVjdElkVXJsIH0gZnJvbSBcIi4uL0thbmJhbi91dGlsXCI7XG5pbXBvcnQgeyB1c2VFcGljc1F1ZXJ5S2V5IH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5cbmV4cG9ydCBjb25zdCBDcmVhdGVFcGljID0gKHByb3BzOiBQaWNrPERyYXdlclByb3BzLCBcInZpc2libGVcIiB8IFwib25DbG9zZVwiPiAmIHtvbkNsb3NlIDooKT0+IHZvaWR9KSA9PiB7XG4gIGNvbnN0IHttdXRhdGU6IGFkZEVwaWMsIGlzTG9hZGluZ30gPSB1c2VBZGRFcGljKHVzZUVwaWNzUXVlcnlLZXkoKSk7XG4gIGNvbnN0IFtmb3JtXSA9IEZvcm0udXNlRm9ybSgpO1xuICBjb25zdCBwcm9qZWN0SWQgPSB1c2VQcm9qZWN0SWRVcmwoKTtcbiAgY29uc3Qgb25GaW5pc2ggPSBhc3luYyAodmFsdWVzOiBhbnkpPT57XG4gICAgY29uc29sZS5sb2codmFsdWVzKVxuICAgIGF3YWl0IGFkZEVwaWMoey4uLnZhbHVlcyxwcm9qZWN0SWR9KTtcbiAgICBwcm9wcy5vbkNsb3NlKCk7XG4gIH1cbiAgdXNlRWZmZWN0KCgpPT57XG4gICAgZm9ybS5yZXNldEZpZWxkcygpO1xuICB9LCBbZm9ybSwgcHJvcHMudmlzaWJsZV0pXG4gIHJldHVybiAoXG4gICAgPERyYXdlclxuICAgICAgZm9yY2VSZW5kZXI9e3RydWV9XG4gICAgICBkZXN0cm95T25DbG9zZT17dHJ1ZX1cbiAgICAgIHdpZHRoPXtcIjEwMCVcIn1cbiAgICAgIG9uQ2xvc2U9e3Byb3BzLm9uQ2xvc2V9XG4gICAgICB2aXNpYmxlPXtwcm9wcy52aXNpYmxlfVxuICAgID5cbiAgICAgIDxDb250YWluZXI+XG4gICAgICAgIDxGb3JtIG9uRmluaXNoPXtvbkZpbmlzaH0gIGZvcm09e2Zvcm19IGxheW91dD17J3ZlcnRpY2FsJ30gc3R5bGU9e3t3aWR0aDogJzQwcmVtJywgcG9zaXRpb246J2Fic29sdXRlJ319ID5cbiAgICAgICAgICA8Rm9ybS5JdGVtIG5hbWU9eyduYW1lJ30gbGFiZWw9XCLlkI3np7BcIiBydWxlcz17W3tyZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogJ+ivt+i+k+WFpSd9XX0+IFxuICAgICAgICAgICAgPElucHV0ICBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpeS7u+WKoSDlkI3np7BcIj5cbiAgICAgICAgICAgIDwvSW5wdXQ+XG4gICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgICA8QnV0dG9uIHN0eWxlPXt7cG9zaXRpb246ICdhYnNvbHV0ZScsIHJpZ2h0OiAnMCd9fSBsb2FkaW5nPXtpc0xvYWRpbmd9IHR5cGU9eydwcmltYXJ5J30gaHRtbFR5cGU9eydzdWJtaXQnfT5cbiAgICAgICAgICDmj5DkuqRcbiAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvRm9ybT5cbiAgICAgIDwvQ29udGFpbmVyPlxuICAgIDwvRHJhd2VyPlxuICApO1xufTtcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogODB2aDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuIiwiaW1wb3J0IHsgQnV0dG9uLCBMaXN0IH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBkYXlqcyBmcm9tIFwiZGF5anNcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFJvdywgU2NyZWVuQ29udGFpbmVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvbGliXCI7XG5pbXBvcnQgeyB1c2VEZWxldGVFcGljLCB1c2VFcGljcyB9IGZyb20gXCIuLi8uLi91dGlscy9lcGljXCI7XG5pbXBvcnQgeyB1c2VUYXNrcyB9IGZyb20gXCIuLi8uLi91dGlscy90YXNrXCI7XG5pbXBvcnQgeyB1c2VQcm9qZWN0SW5VcmwgfSBmcm9tIFwiLi4vS2FuYmFuL3V0aWxcIjtcbmltcG9ydCB7IENyZWF0ZUVwaWMgfSBmcm9tIFwiLi9jcmVhdGUtZXBpY1wiO1xuaW1wb3J0IHsgdXNlRXBpY1NlYXJjaFBhcmFtcywgdXNlRXBpY3NRdWVyeUtleSB9IGZyb20gXCIuL3V0aWxcIjtcblxuZnVuY3Rpb24gRXBpY1NjcmVlbigpIHtcbiAgY29uc3QgeyBkYXRhOiBjdXJyZW50UHJvamVjdCB9ID0gdXNlUHJvamVjdEluVXJsKCk7XG4gIGNvbnN0IHsgZGF0YTogZXBpY3MgfSA9IHVzZUVwaWNzKHVzZUVwaWNTZWFyY2hQYXJhbXMoKSk7XG4gIGNvbnN0IHsgbXV0YXRlOiBkZWxldGVFcGljfSA9IHVzZURlbGV0ZUVwaWModXNlRXBpY3NRdWVyeUtleSgpKVxuICBjb25zdCB7IGRhdGE6IHRhc2tzIH0gPSB1c2VUYXNrcyh7IHByb2plY3RJZDogY3VycmVudFByb2plY3Q/LmlkIH0pO1xuICBjb25zdCBbZXBpY0NyZWF0ZU9wZW4sIHNldEVwaWNDcmVhdGVPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgcmV0dXJuIChcbiAgICA8U2NyZWVuQ29udGFpbmVyPlxuICAgICAgPFJvdyBiZXR3ZWVuPXt0cnVlfT5cbiAgICAgIDxoMT57Y3VycmVudFByb2plY3Q/Lm5hbWV9PC9oMT5cbiAgICAgIDxCdXR0b24gb25DbGljaz17KCk9PnNldEVwaWNDcmVhdGVPcGVuKHRydWUpfT4g5paw5aKePC9CdXR0b24+XG4gICAgICA8L1Jvdz5cbiAgICAgXG4gICAgICA8TGlzdFxuICAgICAgICBkYXRhU291cmNlPXtlcGljc31cbiAgICAgICAgaXRlbUxheW91dD17XCJ2ZXJ0aWNhbFwifVxuICAgICAgICByZW5kZXJJdGVtPXsoZXBpYykgPT4gKFxuICAgICAgICAgIDxMaXN0Lkl0ZW0+XG4gICAgICAgICAgICA8TGlzdC5JdGVtLk1ldGFcbiAgICAgICAgICAgICAgdGl0bGU9e1xuICAgICAgICAgICAgICAgIDxSb3cgYmV0d2Vlbj17dHJ1ZX0+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj57ZXBpYy5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gIHR5cGU9XCJsaW5rXCJvbkNsaWNrPXsoKT0+ZGVsZXRlRXBpYyh7aWQ6IChlcGljLmlkKX0pfT4g5Yig6ZmkPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9Sb3c+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGVzY3JpcHRpb249e1xuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2PuW8gOWni+aXtumXtO+8mntkYXlqcyhlcGljLnN0YXJ0KS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdj7nu5PmnZ/ml7bpl7TvvJp7ZGF5anMoZXBpYy5lbmQpLmZvcm1hdChcIllZWVktTU0tRERcIil9PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgID48L0xpc3QuSXRlbS5NZXRhPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAge3Rhc2tzPy5maWx0ZXIodGFzaz0+IHRhc2suZXBpY0lkID09PSBlcGljLmlkKS5tYXAodGFzayA9PlxuICAgICAgICAgICAgICAgIDxMaW5rIHN0eWxlPXt7bWFyZ2luUmlnaHQ6ICcycmVtJ319IHRvPXtgL3Byb2plY3RzLyR7Y3VycmVudFByb2plY3Q/LmlkfS9rYW5iYW4/ZWRpdGluZ1Rhc2tJZD0ke3Rhc2suaWR9YH0ga2V5PXt0YXNrLmlkfSA+XG4gICAgICAgICAgICAgICAgICB7dGFzay5uYW1lfVxuICAgICAgICAgICAgICAgIDwvTGluaz4pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9MaXN0Lkl0ZW0+XG4gICAgICAgICl9XG4gICAgICA+PC9MaXN0PlxuICAgICAgXG4gICAgICA8Q3JlYXRlRXBpYyBvbkNsb3NlPXsoKT0+IHNldEVwaWNDcmVhdGVPcGVuKGZhbHNlKX0gdmlzaWJsZT17ZXBpY0NyZWF0ZU9wZW59PjwvQ3JlYXRlRXBpYz5cbiAgICA8L1NjcmVlbkNvbnRhaW5lcj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXBpY1NjcmVlbjtcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG4gIERyYWdnYWJsZSxcbiAgRHJhZ2dhYmxlUHJvcHMsXG4gIERyb3BwYWJsZSxcbiAgRHJvcHBhYmxlUHJvcHMsXG4gIERyb3BwYWJsZVByb3ZpZGVkLFxuICBEcm9wcGFibGVQcm92aWRlZFByb3BzLFxufSBmcm9tIFwicmVhY3QtYmVhdXRpZnVsLWRuZFwiO1xuXG50eXBlIERyb3BQcm9wcyA9IE9taXQ8RHJvcHBhYmxlUHJvcHMsIFwiY2hpbGRyZW5cIj4gJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfTtcblxuZXhwb3J0IGNvbnN0IERyb3AgPSAoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfTogRHJvcFByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPERyb3BwYWJsZSB7Li4ucHJvcHN9PlxuICAgICAgeyhwcm92aWRlZCkgPT4ge1xuICAgICAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICAgICAgLi4ucHJvdmlkZWQuZHJvcHBhYmxlUHJvcHMsXG4gICAgICAgICAgICByZWY6IHByb3ZpZGVkLmlubmVyUmVmLFxuICAgICAgICAgICAgcHJvdmlkZWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDxkaXYgLz47XG4gICAgICB9fVxuICAgIDwvRHJvcHBhYmxlPlxuICApO1xufTtcblxudHlwZSBEcm9wQ2hpbGRQcm9wcyA9IFBhcnRpYWw8XG4gIHsgcHJvdmlkZWQ6IERyb3BwYWJsZVByb3ZpZGVkIH0gJiBEcm9wcGFibGVQcm92aWRlZFByb3BzXG4+ICZcbiAgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+O1xuZXhwb3J0IGNvbnN0IERyb3BDaGlsZCA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIERyb3BDaGlsZFByb3BzPihcbiAgKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICAgIDxkaXYgcmVmPXtyZWZ9IHsuLi5wcm9wc30+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICB7cHJvcHMucHJvdmlkZWQ/LnBsYWNlaG9sZGVyfVxuICAgIDwvZGl2PlxuICApXG4pO1xuXG50eXBlIERyYWdQcm9wcyA9IE9taXQ8RHJhZ2dhYmxlUHJvcHMsIFwiY2hpbGRyZW5cIj4gJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfTtcbmV4cG9ydCBjb25zdCBEcmFnID0gKHsgY2hpbGRyZW4sIC4uLnByb3BzIH06IERyYWdQcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxEcmFnZ2FibGUgey4uLnByb3BzfT5cbiAgICAgIHsocHJvdmlkZWQpID0+IHtcbiAgICAgICAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgICAgIC4uLnByb3ZpZGVkLmRyYWdnYWJsZVByb3BzLFxuICAgICAgICAgICAgLi4ucHJvdmlkZWQuZHJhZ0hhbmRsZVByb3BzLFxuICAgICAgICAgICAgcmVmOiBwcm92aWRlZC5pbm5lclJlZixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPGRpdiAvPjtcbiAgICAgIH19XG4gICAgPC9EcmFnZ2FibGU+XG4gICk7XG59O1xuIiwiaW1wb3J0IHsgUXVlcnlLZXksIHVzZU11dGF0aW9uLCB1c2VRdWVyeSwgdXNlUXVlcnlDbGllbnQgfSBmcm9tIFwicmVhY3QtcXVlcnlcIjtcbmltcG9ydCB7IEthbmJhbiB9IGZyb20gXCIuLi90eXBlcy9rYW5iYW5cIjtcbmltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi4vdHlwZXMvdGFza1wiO1xuaW1wb3J0IHsgdXNlSHR0cCB9IGZyb20gXCIuL2h0dHBcIjtcbmltcG9ydCB7IHVzZUFkZENvbmZpZywgdXNlRGVsZXRlQ29uZmlnLCB1c2VFZGl0Q29uZmlnLCB1c2VSZW9yZGVyS2FuYmFuQ29uZmlnIH0gZnJvbSBcIi4vdXNlLW9wdGltaXN0aWMtb3B0aW9uc1wiO1xuXG5leHBvcnQgY29uc3QgdXNlS2FuYmFucyA9IChwYXJhbXM/OiBQYXJ0aWFsPEthbmJhbj4pID0+IHtcbiAgY29uc3QgY2xpZW50ID0gdXNlSHR0cCgpO1xuXG4gIHJldHVybiB1c2VRdWVyeTxLYW5iYW5bXT4oW1wia2FuYmFuc1wiLCBwYXJhbXNdLCAoKSA9PiB7XG4gICAgcmV0dXJuIGNsaWVudChcImthbmJhbnNcIiwgeyBkYXRhOiBwYXJhbXMgfSk7XG4gIH0pO1xufTtcbmV4cG9ydCBjb25zdCB1c2VBZGRLYW5iYW4gPSAocXVlcnlLZXk6IFF1ZXJ5S2V5KSA9PiB7XG4gIGNvbnN0IGNsaWVudCA9IHVzZUh0dHAoKTtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICAvLyBjb25zb2xlLmxvZygn5pu05paw5YmNJyxxdWVyeUNsaWVudC5nZXRRdWVyeURhdGEocXVlcnlLZXkpKTtcbiAgcmV0dXJuIHVzZU11dGF0aW9uKFxuICAgIChwYXJhbXM6IFBhcnRpYWw8S2FuYmFuPikgPT5cbiAgICAgIGNsaWVudChga2FuYmFuc2AsIHtcbiAgICAgICAgZGF0YTogcGFyYW1zLFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgfSksXG4gICAgdXNlQWRkQ29uZmlnKHF1ZXJ5S2V5KVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZURlbGV0ZUthbmJhbiA9IChxdWVyeUtleTogUXVlcnlLZXkpID0+e1xuICBjb25zdCBjbGllbnQgPSB1c2VIdHRwKCk7XG4gIHJldHVybiB1c2VNdXRhdGlvbihcbiAgICAoe2lkfToge2lkOiBudW1iZXJ9KT0+e1xuICAgICAgcmV0dXJuIGNsaWVudChga2FuYmFucy8ke2lkfWAsIHttZXRob2Q6ICdERUxFVEUnfSlcbiAgICB9LFxuICAgIHVzZURlbGV0ZUNvbmZpZyhxdWVyeUtleSlcbiAgKVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNvcnRQcm9wcyB7XG4gIC8vIOaUvuWcqOebruagh2l0ZW0g55qE5YmN6L+Y5piv5ZCOXG4gIHR5cGU6ICdiZWZvcmUnfCAnYWZ0ZXInO1xuICBcbiAgLy8g55uu5qCHaXRlbVxuICByZWZlcmVuY2VJZDogbnVtYmVyO1xuICBcbiAgLy8g6KaB6YeN5paw5o6S5bqP55qEaXRlbVxuICBmcm9tSWQ6IG51bWJlcjtcblxuICBmcm9tS2FuYmFuSWQ/OiBudW1iZXI7XG4gIHRvS2FuYmFuSWQ/IDogbnVtYmVyXG59XG5leHBvcnQgY29uc3QgdXNlUmVvcmRlckthbmJhbiA9IChxdWVyeUtleTogUXVlcnlLZXkpID0+e1xuICBjb25zdCBjbGllbnQgPSB1c2VIdHRwKCk7XG4gIHJldHVybiB1c2VNdXRhdGlvbihcbiAgICAocGFyYW1zOiBTb3J0UHJvcHMpID0+e1xuICAgICAgcmV0dXJuIGNsaWVudChga2FuYmFucy9yZW9yZGVyYCwge1xuICAgICAgICBkYXRhOiBwYXJhbXMsIFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiXG4gICAgICB9KVxuICAgIH0sXG4gICAgdXNlUmVvcmRlckthbmJhbkNvbmZpZyhxdWVyeUtleSlcbiAgKVxufVxuXG5leHBvcnQgY29uc3QgdXNlQWRkVGFzayA9IChxdWVyeUtleTogUXVlcnlLZXkpID0+e1xuICBjb25zdCBjbGllbnQgPSB1c2VIdHRwKCk7XG4gIHJldHVybiB1c2VNdXRhdGlvbigocGFyYW06IFBhcnRpYWw8VGFzaz4pPT57XG4gICAgcmV0dXJuIGNsaWVudCgndGFza3MnLCB7XG4gICAgICBkYXRhOiBwYXJhbSxcbiAgICAgIG1ldGhvZDogJ1BPU1QnXG4gICAgfSxcbiAgICApXG4gIH0sIHVzZUFkZENvbmZpZyhxdWVyeUtleSkpXG59XG5cbiIsImltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyBUYXNrVHlwZSB9IGZyb20gXCIuLi90eXBlcy90YXNrLXR5cGVcIjtcbi8vIGltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi4vdHlwZXMvdGFza1wiO1xuaW1wb3J0IHsgdXNlSHR0cCB9IGZyb20gXCIuL2h0dHBcIjtcblxuXG5leHBvcnQgY29uc3QgdXNlVGFza1R5cGVzID0gKCk9PntcbiAgY29uc3QgY2xpZW50ID0gdXNlSHR0cCgpO1xuICByZXR1cm4gIHVzZVF1ZXJ5PFRhc2tUeXBlIFtdPihbJ3Rhc2tzVHlwZSddLCAoKT0+e1xuICAgIHJldHVybiBjbGllbnQoJ3Rhc2tUeXBlcycpO1xuICB9KVxufSIsImV4cG9ydCBkZWZhdWx0IFwiX19WSVRFX0FTU0VUX19lNWFkNjYwN19fXCIiLCJleHBvcnQgZGVmYXVsdCBcIl9fVklURV9BU1NFVF9fNWNhMDIzNDFfX1wiIiwiaW1wb3J0IHsgQ2FyZCwgSW5wdXQgfSBmcm9tICdhbnRkJztcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQWRkVGFzayB9IGZyb20gJy4uLy4uL3V0aWxzL2thbmJhbic7XG5pbXBvcnQgeyB1c2VQcm9qZWN0SWRVcmwsIHVzZVRhc2tzUXVlcnlLZXkgfSBmcm9tICcuL3V0aWwnO1xuXG5mdW5jdGlvbiBDcmVhdGVUYXNrKHtrYW5iYW5JZH06IHtrYW5iYW5JZDogbnVtYmVyfSkge1xuICBjb25zdCBbbmFtZSwgc2V0TmFtZSBdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCB7bXV0YXRlQXN5bmM6IGFkZFRhc2t9ID0gdXNlQWRkVGFzayh1c2VUYXNrc1F1ZXJ5S2V5KCkpO1xuICBjb25zdCBwcm9qZWN0SWQgPSB1c2VQcm9qZWN0SWRVcmwoKTsgXG4gIGNvbnN0IFtpbnB1dE1vZGUsIHNldElucHV0TW9kZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qgc3VibWl0ID0gYXN5bmMgKCk9PntcbiAgICBhd2FpdCBhZGRUYXNrKHtuYW1lLCBrYW5iYW5JZCwgcHJvamVjdElkfSk7XG4gICAgc2V0TmFtZSgnJyk7XG4gICAgc2V0SW5wdXRNb2RlKGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IHRvZ2dsZSA9ICgpID0+IHNldElucHV0TW9kZShtb2RlID0+ICFtb2RlKTtcbiAgdXNlRWZmZWN0KCgpPT57XG4gICAgaWYoIWlucHV0TW9kZSlzZXROYW1lKCcnKTtcbiAgfSwgW2lucHV0TW9kZV0pXG4gIFxuXG4gIGlmKCFpbnB1dE1vZGUpcmV0dXJuIDxkaXYgb25DbGljaz17dG9nZ2xlfT4r5Yib5bu65LqL5YqhPC9kaXY+XG5cbiAgcmV0dXJuIDxDYXJkPlxuICAgIDxJbnB1dFxuICAgICAgb25CbHVyPXt0b2dnbGV9XG4gICAgICBwbGFjZWhvbGRlcj17J+mcgOimgeWBmuS6m+S7gOS5iCd9XG4gICAgICBhdXRvRm9jdXM9e3RydWV9XG4gICAgICBvblByZXNzRW50ZXI9e3N1Ym1pdH0gdmFsdWU9e25hbWV9XG4gICAgICBvbkNoYW5nZT17ZXZ0PT4gc2V0TmFtZShldnQudGFyZ2V0LnZhbHVlKX1cbiAgICA+PC9JbnB1dD5cbiAgPC9DYXJkPlxufVxuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVUYXNrO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY29uc3QgTWFyayA9ICh7IG5hbWUsIGtleXdvcmQgfTogeyBuYW1lOiBzdHJpbmc7IGtleXdvcmQ6IHN0cmluZyB9KSA9PiB7XG4gIGlmICgha2V5d29yZCkgcmV0dXJuIDw+e25hbWV9PC8+O1xuICBjb25zdCBhcnIgPSBuYW1lLnNwbGl0KGtleXdvcmQpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7YXJyLm1hcCgoc3RyOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IChcbiAgICAgICAgPHNwYW4ga2V5PXtpbmRleH0+XG4gICAgICAgICAge3N0cn1cbiAgICAgICAgICB7aW5kZXggPT09IGFyci5sZW5ndGggLSAxID8gbnVsbCA6IChcbiAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiMyNTdBRkRcIiB9fT57a2V5d29yZH08L3NwYW4+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgKSl9XG4gICAgPC8+XG4gICk7XG59O1xuIiwiaW1wb3J0IHsgS2FuYmFuIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2thbmJhblwiO1xuaW1wb3J0IHsgdXNlVGFza3MgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdGFza1wiO1xuaW1wb3J0IHsgdXNlVGFza1R5cGVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3Rhc2stdHlwZVwiO1xuaW1wb3J0IHsgdXNlS2FuYmFuUXVlcnlLZXksIHVzZVRhc2tzTW9kYWwsIHVzZVRhc2tzU2VhcmNoUGFyYW1zIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHRhc2tJY29uIGZyb20gXCIuLi8uLi9hc3NldHMvdGFzay5zdmdcIjtcbmltcG9ydCBidWdJY29uIGZyb20gXCIuLi8uLi9hc3NldHMvYnVnLnN2Z1wiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgeyBCdXR0b24sIENhcmQsIERyb3Bkb3duLCBNZW51LCBNb2RhbCB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgQ3JlYXRlVGFzayBmcm9tIFwiLi9jcmVhdGUtdGFza1wiO1xuaW1wb3J0IHsgdXNlU2VhcmNoUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi4vLi4vdHlwZXMvdGFza1wiO1xuaW1wb3J0IHsgTWFyayB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL21hcmtcIjtcbmltcG9ydCB7IHVzZURlbGV0ZUthbmJhbiB9IGZyb20gXCIuLi8uLi91dGlscy9rYW5iYW5cIjtcbmltcG9ydCB7IHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyBSb3cgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9saWJcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IERyYWcsIERyb3AsIERyb3BDaGlsZCB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2RyYWctYW5kLWRyb3BcIjtcbmNvbnN0IFRhc2tUeXBlSXJvbiA9ICh7IGlkIH06IHsgaWQ6IG51bWJlciB9KSA9PiB7XG4gIGNvbnN0IHsgZGF0YTogdGFza3NUeXBlIH0gPSB1c2VUYXNrVHlwZXMoKTtcbiAgY29uc3QgaXRlbSA9IHRhc2tzVHlwZT8uZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpO1xuICBpZiAoIWl0ZW0/Lm5hbWUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gKFxuICAgIDxpbWcgYWx0PXtcInRhc2staWNvblwifSBzcmM9e2l0ZW0ubmFtZSA9PT0gXCJ0YXNrXCIgPyB0YXNrSWNvbiA6IGJ1Z0ljb259IC8+XG4gICk7XG59O1xuXG5jb25zdCBUYXNrQ2FyZCA9ICh7IHRhc2sgfTogeyB0YXNrOiBUYXNrIH0pID0+IHtcbiAgY29uc3QgeyBzdGFydEVkaXQgfSA9IHVzZVRhc2tzTW9kYWwoKTtcbiAgY29uc3QgeyBuYW1lOiBzZWFyY2hOYW1lIH0gPSB1c2VUYXNrc1NlYXJjaFBhcmFtcygpO1xuICByZXR1cm4gKFxuICAgIDxDYXJkXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIHN0YXJ0RWRpdCh0YXNrLmlkKTtcbiAgICAgIH19XG4gICAgICBzdHlsZT17eyBtYXJnaW5Cb3R0b206IFwiMC41cmVtXCIsIGN1cnNvcjogXCJwb2ludGVyIFwiIH19XG4gICAgICBrZXk9e3Rhc2suaWR9XG4gICAgPlxuICAgICAgPHA+XG4gICAgICAgIHtcIiBcIn1cbiAgICAgICAgPE1hcmsgbmFtZT17dGFzay5uYW1lfSBrZXl3b3JkPXtzZWFyY2hOYW1lIHx8IFwiXCJ9PjwvTWFyaz5cbiAgICAgIDwvcD5cbiAgICAgIDxUYXNrVHlwZUlyb24gaWQ9e3Rhc2sudHlwZUlkfSAvPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBLYW5iYW5Db2x1bW4gPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MRGl2RWxlbWVudCxcbiAgeyBrYW5iYW46IEthbmJhbiB9XG4+KCAoeyBrYW5iYW4sIC4uLnByb3BzIH0sIHJlZikgPT4ge1xuICBjb25zdCB7IGRhdGE6IGFsbFRhc2tzIH0gPSB1c2VUYXNrcyh1c2VUYXNrc1NlYXJjaFBhcmFtcygpKTtcbiAgY29uc3QgdGFza3MgPSBhbGxUYXNrcz8uZmlsdGVyKCh0YXNrKSA9PiB0YXNrLmthbmJhbklkID09PSBrYW5iYW4uaWQpO1xuICByZXR1cm4gKFxuICAgIDxDb250YWluZXIgey4uLnByb3BzfSByZWY9e3JlZn0+XG4gICAgICA8Um93IGJldHdlZW49e3RydWV9PlxuICAgICAgICA8aDM+e2thbmJhbi5uYW1lfTwvaDM+XG4gICAgICAgIDxNb3JlIGthbmJhbj17a2FuYmFufSBrZXk9e2thbmJhbi5pZH0gLz5cbiAgICAgIDwvUm93PlxuICAgICAgPFRhc2tzQ29udGFpbmVyPlxuICAgICAgICA8RHJvcFxuICAgICAgICAgIHR5cGU9e1wiUk9XXCJ9XG4gICAgICAgICAgZGlyZWN0aW9uPXtcInZlcnRpY2FsXCJ9XG4gICAgICAgICAgZHJvcHBhYmxlSWQ9e1N0cmluZyhrYW5iYW4uaWQpfVxuICAgICAgICA+XG4gICAgICAgICAgPERyb3BDaGlsZCBzdHlsZT17eyBtaW5IZWlnaHQ6IFwiMXJlbVwiIH19PlxuICAgICAgICAgICAge3Rhc2tzPy5tYXAoKHRhc2ssIHRhc2tJbmRleCkgPT4gKFxuICAgICAgICAgICAgICA8RHJhZ1xuICAgICAgICAgICAgICAgIGtleT17dGFzay5pZH1cbiAgICAgICAgICAgICAgICBpbmRleD17dGFza0luZGV4fVxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZUlkPXtcInRhc2tcIiArIHRhc2suaWR9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgPFRhc2tDYXJkIGtleT17dGFzay5pZH0gdGFzaz17dGFza30gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9EcmFnPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9Ecm9wQ2hpbGQ+XG4gICAgICAgIDwvRHJvcD5cbiAgICAgICAgPENyZWF0ZVRhc2sga2FuYmFuSWQ9e2thbmJhbi5pZH0gLz5cbiAgICAgIDwvVGFza3NDb250YWluZXI+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59KTtcblxuY29uc3QgTW9yZSA9ICh7IGthbmJhbiB9OiB7IGthbmJhbjogS2FuYmFuIH0pID0+IHtcbiAgY29uc3QgeyBtdXRhdGVBc3luYyB9ID0gdXNlRGVsZXRlS2FuYmFuKHVzZUthbmJhblF1ZXJ5S2V5KCkpO1xuICBjb25zdCBzdGFydEVkaXQgPSAoKSA9PiB7XG4gICAgTW9kYWwuY29uZmlybSh7XG4gICAgICBva1RleHQ6IFwi56Gu5a6aXCIsXG4gICAgICBjYW5jZWxUZXh0OiBcIuWPlua2iFwiLFxuICAgICAgdGl0bGU6IFwi56Gu5a6a5Yig6Zmk55yL5p2/5ZCXXCIsXG4gICAgICBvbk9rKCkge1xuICAgICAgICByZXR1cm4gbXV0YXRlQXN5bmMoeyBpZDoga2FuYmFuLmlkIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcbiAgY29uc3Qgb3ZlcmxheSA9IChcbiAgICA8TWVudT5cbiAgICAgIDxNZW51Lkl0ZW0+XG4gICAgICAgIDxCdXR0b24gb25DbGljaz17c3RhcnRFZGl0fSB0eXBlPXtcImxpbmtcIn0+XG4gICAgICAgICAg5Yig6ZmkXG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9NZW51Lkl0ZW0+XG4gICAgPC9NZW51PlxuICApO1xuICByZXR1cm4gKFxuICAgIDxEcm9wZG93biBvdmVybGF5PXtvdmVybGF5fT5cbiAgICAgIDxCdXR0b24gdHlwZT17XCJsaW5rXCJ9Pi4uLjwvQnV0dG9uPlxuICAgIDwvRHJvcGRvd24+XG4gICk7XG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1pbi13aWR0aDogMjdyZW07XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NCwgMjQ1LCAyNDcpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nOiAwLjdyZW0gMC43cmVtIDFyZW07XG4gIG1hcmdpbi1yaWdodDogMS41cmVtO1xuYDtcbmNvbnN0IFRhc2tzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcbiAgLyogb3ZlcmZsb3c6IGhpZGRlbjsgKi9cbiAgLyogZmxleDogMTsgKi9cbiAgLyogaGVpZ2h0OiA1MCU7ICovXG4gIDo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG4iLCJpbXBvcnQgeyBCdXR0b24sIElucHV0IH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlQWRkS2FuYmFuLCB1c2VLYW5iYW5zIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2thbmJhblwiO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIi4va2FuYmFuLWNvbHVtblwiO1xuaW1wb3J0IHsgdXNlS2FuYmFuUXVlcnlLZXksIHVzZVByb2plY3RJZFVybCB9IGZyb20gXCIuL3V0aWxcIjtcblxuZXhwb3J0IGNvbnN0IENyZWF0ZUthbmJhbiA9ICgpID0+IHtcbiAgY29uc3QgW25hbWUsIHNldE5hbWVdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IHByb2plY3RJZCA9IHVzZVByb2plY3RJZFVybCgpO1xuICBjb25zdCB7IG11dGF0ZUFzeW5jOiBhZGRLYW4gfSA9IHVzZUFkZEthbmJhbih1c2VLYW5iYW5RdWVyeUtleSgpKTtcbiAgY29uc3Qgc3VibWl0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGFkZEthbih7IG5hbWUsIHByb2plY3RJZCB9KTtcbiAgICBzZXROYW1lKFwiXCIpO1xuICB9O1xuICByZXR1cm4gKFxuICAgIDxDb250YWluZXI+XG4gICAgICA8SW5wdXRcbiAgICAgICAgc2l6ZT17XCJsYXJnZVwifVxuICAgICAgICBwbGFjZWhvbGRlcj17XCLmlrDlu7rnnIvmnb/lkI3np7BcIn1cbiAgICAgICAgb25QcmVzc0VudGVyPXtzdWJtaXR9XG4gICAgICAgIHZhbHVlPXtuYW1lfVxuICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldE5hbWUoZS50YXJnZXQudmFsdWUpfVxuICAgICAgPjwvSW5wdXQ+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBTZWxlY3QgfSBmcm9tIFwiYW50ZFwiO1xuXG50eXBlIFJhdyA9IHN0cmluZyB8IG51bWJlcjtcbnR5cGUgU2VsZWN0UHJvcHMgPSBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgU2VsZWN0PjtcblxuaW50ZXJmYWNlIElkU2VsZWN0UHJvcHNcbiAgZXh0ZW5kcyBPbWl0PFNlbGVjdFByb3BzLCBcInZhbHVlXCIgfCBcIm9uQ2hhbmdlXCIgfCBcIm9wdGlvbnNcIj4ge1xuICB2YWx1ZT86IFJhdyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIG9uQ2hhbmdlPzogKHZhbHVlPzogbnVtYmVyKSA9PiB2b2lkO1xuICBkZWZhdWx0T3B0aW9uTmFtZT86IHN0cmluZztcbiAgb3B0aW9ucz86IHsgbmFtZTogc3RyaW5nOyBpZDogbnVtYmVyIH1bXTtcbn1cblxuLyoqXG4gKiB2YWx1ZSDlj6/ku6XkvKDlhaXlpJrnp43nsbvlnovnmoTlgLxcbiAqIG9uQ2hhbmdl5Y+q5Lya5Zue6LCDIG51bWJlcnx1bmRlZmluZWQg57G75Z6LXG4gKiDlvZMgaXNOYU4oTnVtYmVyKHZhbHVlKSkg5Li6dHJ1ZeeahOaXtuWAme+8jOS7o+ihqOmAieaLqem7mOiupOexu+Wei1xuICog5b2T6YCJ5oup6buY6K6k57G75Z6L55qE5pe25YCZ77yMb25DaGFuZ2XkvJrlm57osIN1bmRlZmluZWRcbiAqIEBwYXJhbSBwcm9wc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjb25zdCBJZFNlbGVjdCA9IChwcm9wczogSWRTZWxlY3RQcm9wcykgPT4ge1xuICBjb25zdCB7IHZhbHVlLCBvbkNoYW5nZSwgZGVmYXVsdE9wdGlvbk5hbWUsIG9wdGlvbnMsIC4uLnJlc3RQcm9wcyB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8U2VsZWN0XG4gICAgICB2YWx1ZT17b3B0aW9ucz8ubGVuZ3RoID8gdG9OdW1iZXIodmFsdWUpIDogMH1cbiAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IG9uQ2hhbmdlPy4odG9OdW1iZXIodmFsdWUpIHx8IHVuZGVmaW5lZCl9XG4gICAgICB7Li4ucmVzdFByb3BzfVxuICAgID5cbiAgICAgIHtkZWZhdWx0T3B0aW9uTmFtZSA/IChcbiAgICAgICAgPFNlbGVjdC5PcHRpb24gdmFsdWU9ezB9PntkZWZhdWx0T3B0aW9uTmFtZX08L1NlbGVjdC5PcHRpb24+XG4gICAgICApIDogbnVsbH1cbiAgICAgIHtvcHRpb25zPy5tYXAoKG9wdGlvbikgPT4gKFxuICAgICAgICA8U2VsZWN0Lk9wdGlvbiBrZXk9e29wdGlvbi5pZH0gdmFsdWU9e29wdGlvbi5pZH0+XG4gICAgICAgICAge29wdGlvbi5uYW1lfVxuICAgICAgICA8L1NlbGVjdC5PcHRpb24+XG4gICAgICApKX1cbiAgICA8L1NlbGVjdD5cbiAgKTtcbn07XG5cbmNvbnN0IHRvTnVtYmVyID0gKHZhbHVlOiB1bmtub3duKSA9PiAoaXNOYU4oTnVtYmVyKHZhbHVlKSkgPyAwIDogTnVtYmVyKHZhbHVlKSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUYXNrcyB9IGZyb20gXCIuLi91dGlscy90YXNrXCI7IFxuaW1wb3J0IHsgdXNlVGFza1R5cGVzIH0gZnJvbSBcIi4uL3V0aWxzL3Rhc2stdHlwZVwiO1xuaW1wb3J0IHsgSWRTZWxlY3QgfSBmcm9tIFwiLi9pZC1zZWxlY3RcIjtcblxuZXhwb3J0IGNvbnN0IFRhc2tUeXBlU2VsZWN0ID0gKHByb3BzOiBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgSWRTZWxlY3Q+KSA9PiB7XG4gIGNvbnN0IHsgZGF0YTogdGFza1R5cGVzfSA9IHVzZVRhc2tUeXBlcygpO1xuICByZXR1cm4gPElkU2VsZWN0IG9wdGlvbnM9e3Rhc2tUeXBlcyB8fCBbXX0gey4uLnByb3BzfSAvPjtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VVc2VycyB9IGZyb20gICcuLi91dGlscy91c2VyJzsgXG5pbXBvcnQgeyBJZFNlbGVjdCB9IGZyb20gXCIuL2lkLXNlbGVjdFwiO1xuXG5leHBvcnQgY29uc3QgVXNlclNlbGVjdCA9IChwcm9wczogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIElkU2VsZWN0PikgPT4ge1xuICBjb25zdCB7IGRhdGE6IHVzZXJzIH0gPSB1c2VVc2VycygpO1xuICByZXR1cm4gPElkU2VsZWN0IG9wdGlvbnM9e3VzZXJzIHx8IFtdfSB7Li4ucHJvcHN9IC8+O1xufTtcbiIsImltcG9ydCB7IEJ1dHRvbiwgSW5wdXQgfSBmcm9tIFwiYW50ZFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VhcmNoUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFJvdyB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2xpYlwiO1xuaW1wb3J0IHsgVGFza1R5cGVTZWxlY3QgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy90YXNrLXR5cGUtc2VsZWN0XCI7XG5pbXBvcnQgeyBVc2VyU2VsZWN0IH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdXNlci1zZWxlY3RcIjtcbmltcG9ydCB7IHVzZVNldFVybFNlYXJjaFBhcmFtIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3VybFwiO1xuaW1wb3J0IHsgdXNlVGFza3NTZWFyY2hQYXJhbXMgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBjb25zdCBTZWFyY2hQYW5lbCA9ICgpID0+IHtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gdXNlVGFza3NTZWFyY2hQYXJhbXMoKTtcbiAgY29uc3Qgc2V0U2VhcmNoUGFyYW1zID0gdXNlU2V0VXJsU2VhcmNoUGFyYW0oKTtcbiAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgc2V0U2VhcmNoUGFyYW1zKHtcbiAgICAgIHR5cGVJZDogdW5kZWZpbmVkLFxuICAgICAgcHJvY2Vzc29ySWQ6IHVuZGVmaW5lZCxcbiAgICAgIHRhZ0lkOiB1bmRlZmluZWQsXG4gICAgICBuYW1lOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiAoXG4gICAgPFJvdyBtYXJnaW5Cb3R0b209ezJ9IGdhcD17dHJ1ZX0+XG4gICAgICA8SW5wdXRcbiAgICAgICAgc3R5bGU9e3sgd2lkdGg6IFwiMjByZW1cIiB9fVxuICAgICAgICBwbGFjZWhvbGRlcj17XCLpobnnm67lkI1cIn1cbiAgICAgICAgdmFsdWU9e3NlYXJjaFBhcmFtcy5uYW1lfVxuICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICBzZXRTZWFyY2hQYXJhbXMoe1xuICAgICAgICAgICAgbmFtZTogZS50YXJnZXQudmFsdWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICAgPFVzZXJTZWxlY3RcbiAgICAgICAgZGVmYXVsdE9wdGlvbk5hbWU9e1wi57uP5Yqe5Lq6XCJ9XG4gICAgICAgIHZhbHVlPXtzZWFyY2hQYXJhbXMucHJvY2Vzc29ySWR9XG4gICAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IHtcbiAgICAgICAgICBzZXRTZWFyY2hQYXJhbXMoeyBwcm9jZXNzb3JJZDogdmFsdWUgfSk7XG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICAgPFRhc2tUeXBlU2VsZWN0IGRlZmF1bHRPcHRpb25OYW1lPVwi57G75Z6LXCIgdmFsdWU9e3NlYXJjaFBhcmFtcy50eXBlSWR9IG9uQ2hhbmdlPXsodmFsdWUpPT4gc2V0U2VhcmNoUGFyYW1zKHt0eXBlSWQ6IHZhbHVlfSl9PjwvVGFza1R5cGVTZWxlY3Q+XG4gICAgICAgIDxCdXR0b24gb25DbGljaz17KCk9PiByZXNldCgpfT7muIXpmaTnrZvpgInlmag8L0J1dHRvbj5cbiAgICA8L1Jvdz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBCdXR0b24sIEZvcm0sIElucHV0LCBNb2RhbCB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgeyB1c2VGb3JtIH0gZnJvbSBcImFudGQvbGliL2Zvcm0vRm9ybVwiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgVGFza1R5cGVTZWxlY3QgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy90YXNrLXR5cGUtc2VsZWN0XCI7XG5pbXBvcnQgeyBVc2VyU2VsZWN0IH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdXNlci1zZWxlY3RcIjtcbmltcG9ydCB7IHVzZURlbGV0ZVRhc2ssIHVzZUVkaXRUYXNrIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3Rhc2tcIjtcbmltcG9ydCB7IHVzZVRhc2tzTW9kYWwsIHVzZVRhc2tzUXVlcnlLZXkgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmNvbnN0IGxheW91dCA9IHtcbiAgbGFiZWxDb2w6IHsgc3BhbjogOCB9LFxuICB3cmFwcGVyQ29sOiB7IHNwYW46IDE2IH0sXG59O1xuZnVuY3Rpb24gVGFza01vZGFsKCkge1xuICBjb25zdCBbZm9ybV0gPSB1c2VGb3JtKCk7XG4gIGNvbnN0IHsgZWRpdGluZ1Rhc2tJZCwgZWRpdGluZ1Rhc2ssIGNsb3NlIH0gPSB1c2VUYXNrc01vZGFsKCk7XG5cbiAgY29uc3QgeyBtdXRhdGVBc3luYzogZWRpdFRhc2ssIGlzTG9hZGluZzogZWRpdExvYWRpbmcgfSA9IHVzZUVkaXRUYXNrKFxuICAgIHVzZVRhc2tzUXVlcnlLZXkoKVxuICApO1xuXG4gIGNvbnN0IG9uQ2FuY2FsID0gKCkgPT4ge1xuICAgIGNsb3NlKCk7XG4gICAgZm9ybS5yZXNldEZpZWxkcygpO1xuICB9O1xuXG4gIGNvbnN0IG9uT2sgPSBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZWRpdFRhc2soeyAuLi5lZGl0aW5nVGFzaywgLi4uZm9ybS5nZXRGaWVsZHNWYWx1ZSgpIH0pO1xuICAgIGNsb3NlKCk7XG4gIH07XG5cbiAgY29uc3Qge211dGF0ZUFzeW5jfSA9IHVzZURlbGV0ZVRhc2sodXNlVGFza3NRdWVyeUtleSgpKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmb3JtLnNldEZpZWxkc1ZhbHVlKGVkaXRpbmdUYXNrKTtcbiAgfSwgW2Zvcm0sIGVkaXRpbmdUYXNrXSk7XG4gIGNvbnN0IGRlbGV0ZVRhc2sgPSAoKT0+e1xuICAgIGNsb3NlKCk7XG4gICAgTW9kYWwuY29uZmlybSh7XG4gICAgICB0aXRsZTogJ+ehruWumuWIoOmZpOS7u+WKoeWQlycsXG4gICAgICBva1RleHQ6ICfnoa7lrponLFxuICAgICAgY2FuY2VsVGV4dDogJ+WPlua2iCcsXG4gICAgICBvbk9rOiAoKT0+e1xuICAgICAgICByZXR1cm4gbXV0YXRlQXN5bmMoe2lkOiBOdW1iZXIoZWRpdGluZ1Rhc2tJZCl9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8TW9kYWwgZm9yY2VSZW5kZXI9e3RydWV9XG4gICAgICBvbkNhbmNlbD17b25DYW5jYWx9XG4gICAgICBvbk9rPXtvbk9rfVxuICAgICAgb2tUZXh0PXtcIuehruWumlwifVxuICAgICAgY2FuY2VsVGV4dD17XCLlj5bmtohcIn1cbiAgICAgIGNvbmZpcm1Mb2FkaW5nPXtlZGl0TG9hZGluZ31cbiAgICAgIHRpdGxlPXtcIue8lui+keS7u+WKoVwifVxuICAgICAgdmlzaWJsZT17ISFlZGl0aW5nVGFza0lkfVxuICAgID5cbiAgICAgIDxGb3JtIGZvcm09e2Zvcm19IHsuLi5sYXlvdXR9IGluaXRpYWxWYWx1ZXM9e2VkaXRpbmdUYXNrfT5cbiAgICAgICAgPEZvcm0uSXRlbSBuYW1lPVwibmFtZVwiIGxhYmVsPXtcIuS7u+WKoeWQjVwifT5cbiAgICAgICAgICA8SW5wdXQ+PC9JbnB1dD5cbiAgICAgICAgPC9Gb3JtLkl0ZW0+XG4gICAgICAgIDxGb3JtLkl0ZW0gbGFiZWw9e1wi57uP5Yqe5Lq6XCJ9IG5hbWU9eydwcm9jZXNzb3JJZCd9PlxuICAgICAgICAgIDxVc2VyU2VsZWN0IGRlZmF1bHRPcHRpb25OYW1lPXtcIue7j+WKnuS6ulwifT48L1VzZXJTZWxlY3Q+XG4gICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgICA8Rm9ybS5JdGVtIGxhYmVsPXtcIuexu+Wei1wifSBuYW1lPXtcInR5cGVJZFwifT5cbiAgICAgICAgICA8VGFza1R5cGVTZWxlY3Q+PC9UYXNrVHlwZVNlbGVjdD5cbiAgICAgICAgPC9Gb3JtLkl0ZW0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3t0ZXh0QWxpZ246ICdyaWdodCd9fT5cbiAgICAgICAgPEJ1dHRvbiB0eXBlPXsnbGluayd9IG9uQ2xpY2s9e2RlbGV0ZVRhc2t9PuWIoOmZpDwvQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRm9ybT5cbiAgICA8L01vZGFsPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUYXNrTW9kYWw7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IFNwaW4gfSBmcm9tIFwiYW50ZFwiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgRHJhZ0Ryb3BDb250ZXh0LCBEcm9wUmVzdWx0IH0gZnJvbSBcInJlYWN0LWJlYXV0aWZ1bC1kbmRcIjtcbmltcG9ydCB7IHVzZVNlYXJjaFBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBEcmFnLCBEcm9wLCBEcm9wQ2hpbGQgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9kcmFnLWFuZC1kcm9wXCI7XG5pbXBvcnQgeyBTY3JlZW5Db250YWluZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9saWJcIjtcbmltcG9ydCB7IHVzZURvY3VtZW50VGl0bGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IHVzZUthbmJhbnMsIHVzZVJlb3JkZXJLYW5iYW4gfSBmcm9tIFwiLi4vLi4vdXRpbHMva2FuYmFuXCI7XG5pbXBvcnQgeyB1c2VSZW9yZGVyVGFzaywgdXNlVGFza3MgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdGFza1wiO1xuaW1wb3J0IHsgQ3JlYXRlS2FuYmFuIH0gZnJvbSBcIi4vY3JlYXRlLWthbmJhblwiO1xuaW1wb3J0IHsgS2FuYmFuQ29sdW1uIH0gZnJvbSBcIi4va2FuYmFuLWNvbHVtblwiO1xuaW1wb3J0IHsgU2VhcmNoUGFuZWwgfSBmcm9tIFwiLi9zZWFyY2gtcGFuZWxcIjtcbmltcG9ydCBUYXNrTW9kYWwgZnJvbSBcIi4vdGFzay1tb2RhbFwiO1xuaW1wb3J0IHtcbiAgdXNlS2FuYmFuUXVlcnlLZXksXG4gIHVzZUthbmJhblNlYXJjaFBhcmFtcyxcbiAgdXNlUHJvamVjdEluVXJsLFxuICB1c2VUYXNrc1F1ZXJ5S2V5LFxuICB1c2VUYXNrc1NlYXJjaFBhcmFtcyxcbn0gZnJvbSBcIi4vdXRpbFwiO1xuZnVuY3Rpb24gS2FuYmFuU2NyZWVuKCkge1xuICB1c2VEb2N1bWVudFRpdGxlKFwi55yL5p2/5YiX6KGoXCIpO1xuICBjb25zdCB7IGRhdGE6IGN1cnJlbnRQcm9qZWN0IH0gPSB1c2VQcm9qZWN0SW5VcmwoKTtcbiAgY29uc3QgeyBkYXRhOiBrYW5iYW5zLCBpc0xvYWRpbmc6IGthbmJhbklzTG9hZGluZyB9ID0gdXNlS2FuYmFucyhcbiAgICB1c2VLYW5iYW5TZWFyY2hQYXJhbXMoKVxuICApO1xuICBjb25zdCB7IGlzTG9hZGluZzogdGFza0lzTG9hZGluZyB9ID0gdXNlVGFza3ModXNlVGFza3NTZWFyY2hQYXJhbXMoKSk7XG4gIGNvbnN0IGlzTG9hZGluZyA9IHRhc2tJc0xvYWRpbmcgfHwga2FuYmFuSXNMb2FkaW5nO1xuICBjb25zdCBvbkRyYWdFbmQgPSB1c2VEcmFnRW5kKCk7XG4gIHJldHVybiAoXG5cbiAgICA8RHJhZ0Ryb3BDb250ZXh0IG9uRHJhZ0VuZD17b25EcmFnRW5kfT5cbiAgICA8U2NyZWVuQ29udGFpbmVyPlxuICAgICAgPGgxPntjdXJyZW50UHJvamVjdD8ubmFtZX3nnIvmnb88L2gxPlxuICAgICAgPFNlYXJjaFBhbmVsIC8+XG4gICAgICB7aXNMb2FkaW5nID8gKFxuICAgICAgICA8U3BpbiBzaXplPXtcImxhcmdlXCJ9IC8+XG4gICAgICApIDogKFxuICAgICAgICA8Q29sdW1uc0NvbnRhaW5lcj5cbiAgICAgICAgICA8RHJvcFxuICAgICAgICAgICAgdHlwZT17XCJDT0xVTU5cIn1cbiAgICAgICAgICAgIGRpcmVjdGlvbj17XCJob3Jpem9udGFsXCJ9XG4gICAgICAgICAgICBkcm9wcGFibGVJZD17XCJrYW5iYW5cIn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8RHJvcENoaWxkIHN0eWxlPXt7IGRpc3BsYXk6IFwiZmxleFwiIH19PlxuICAgICAgICAgICAgICB7a2FuYmFucz8ubWFwKChrYW5iYW4sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPERyYWdcbiAgICAgICAgICAgICAgICAgIGtleT17a2FuYmFuLmlkfVxuICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlSWQ9e1wia2FuYmFuXCIgKyBrYW5iYW4uaWR9XG4gICAgICAgICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEthbmJhbkNvbHVtbiBrYW5iYW49e2thbmJhbn0ga2V5PXtrYW5iYW4uaWR9IC8+XG4gICAgICAgICAgICAgICAgPC9EcmFnPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcENoaWxkPlxuICAgICAgICAgIDwvRHJvcD5cbiAgICAgICAgICA8Q3JlYXRlS2FuYmFuIC8+XG4gICAgICAgIDwvQ29sdW1uc0NvbnRhaW5lcj5cbiAgICAgICl9XG4gICAgICA8VGFza01vZGFsIC8+XG4gICAgPC9TY3JlZW5Db250YWluZXI+XG4gIDwvRHJhZ0Ryb3BDb250ZXh0PlxuXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEthbmJhblNjcmVlbjtcbmV4cG9ydCBjb25zdCB1c2VEcmFnRW5kID0gKCkgPT57XG4gIGNvbnN0IHtkYXRhOiBrYW5iYW5zfSA9IHVzZUthbmJhbnModXNlS2FuYmFuU2VhcmNoUGFyYW1zKCkpXG4gIGNvbnN0IHttdXRhdGU6IHJlb3JkZXJLYW5iYW59ID0gdXNlUmVvcmRlckthbmJhbih1c2VLYW5iYW5RdWVyeUtleSgpKTtcbiAgY29uc3Qge2RhdGE6IGFsbFRhc2tzID1bXX0gPSB1c2VUYXNrcyh1c2VUYXNrc1NlYXJjaFBhcmFtcygpKTsgXG4gIGNvbnN0IHttdXRhdGU6IHJlb3JkZXJUYXNrfSA9IHVzZVJlb3JkZXJUYXNrKHVzZVRhc2tzUXVlcnlLZXkoKSk7XG4gIHJldHVybiB1c2VDYWxsYmFjaygoe3NvdXJjZSwgZGVzdGluYXRpb24sIHR5cGV9OiBEcm9wUmVzdWx0KT0+e1xuICAgIGNvbnNvbGUubG9nKHNvdXJjZSwgZGVzdGluYXRpb24sIHR5cGUpO1xuICAgIGlmKCFkZXN0aW5hdGlvbikgcmV0dXJuIDtcbiAgICBpZih0eXBlID09PSAnQ09MVU1OJykge1xuICAgICAgY29uc3QgZnJvbUlkID0ga2FuYmFucz8uW3NvdXJjZS5pbmRleF0uaWQ7XG4gICAgICBjb25zdCB0b0lkID0ga2FuYmFucz8uW2Rlc3RpbmF0aW9uLmluZGV4XS5pZDtcbiAgICAgIGlmKCFmcm9tSWQgfHwgIXRvSWQgfHwgZnJvbUlkID09PSB0b0lkKXtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHR5cGUgPSBkZXN0aW5hdGlvbi5pbmRleD4gc291cmNlLmluZGV4PyBcImFmdGVyXCI6ICdiZWZvcmUnO1xuICAgICAgcmVvcmRlckthbmJhbih7ZnJvbUlkLCByZWZlcmVuY2VJZDogdG9JZCwgdHlwZX0pXG4gICAgfVxuICAgIGlmKHR5cGUgPT09ICdST1cnKSB7XG4gICAgICBjb25zdCBmcm9tS2FuYmFuSWQgPSArc291cmNlLmRyb3BwYWJsZUlkO1xuICAgICAgY29uc3QgdG9LYW5iYW5JZCA9ICtkZXN0aW5hdGlvbi5kcm9wcGFibGVJZDtcblxuICAgICAgY29uc3QgZnJvbVRhc2sgPSBhbGxUYXNrcy5maWx0ZXIodGFzayA9PiB0YXNrLmthbmJhbklkID09PSBmcm9tS2FuYmFuSWQpW3NvdXJjZS5pbmRleF07XG4gICAgICBjb25zdCB0b1Rhc2sgPSBhbGxUYXNrcy5maWx0ZXIodGFzayA9PiB0YXNrLmthbmJhbklkID09PSB0b0thbmJhbklkKVtkZXN0aW5hdGlvbi5pbmRleF07XG4gICAgICBpZihmcm9tVGFzaz8uaWQgPT09IHRvVGFzaz8uaWQgJiYgZnJvbUthbmJhbklkID09PSB0b0thbmJhbklkKXtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICAgIHJlb3JkZXJUYXNrKHtcbiAgICAgICAgZnJvbUlkOiBmcm9tVGFzaz8uaWQsXG4gICAgICAgIHJlZmVyZW5jZUlkOiB0b1Rhc2s/LmlkLFxuICAgICAgICBmcm9tS2FuYmFuSWQsXG4gICAgICAgIHRvS2FuYmFuSWQsXG4gICAgICAgIHR5cGU6IGZyb21LYW5iYW5JZCA9PT0gdG9LYW5iYW5JZCAmJiBkZXN0aW5hdGlvbi5pbmRleD4gc291cmNlLmluZGV4PyBcImFmdGVyXCI6ICdiZWZvcmUnXG4gICAgICB9KVxuICAgIH1cbiAgfSwgW2thbmJhbnMsIHJlb3JkZXJLYW5iYW4sIGFsbFRhc2tzLCByZW9yZGVyVGFza10pXG59XG5cblxuZXhwb3J0IGNvbnN0IENvbHVtbnNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICAvKiBvdmVyZmxvdzogc2Nyb2xsOyAqL1xuICBmbGV4OiAxO1xuICBvdmVyZmxvdy14OiBzY3JvbGw7XG5cbmA7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7IE1lbnUgfSBmcm9tICdhbnRkJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rLCBSb3V0ZSwgUm91dGVzLCBOYXZpZ2F0ZSwgdXNlTG9jYXRpb24gfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBFcGljU2NyZWVuIGZyb20gJy4uL2VwaWMnO1xuaW1wb3J0IEthbmJhblNjcmVlbiBmcm9tICcuLi9LYW5iYW4nO1xuaW1wb3J0IHtTY3JlZW5Db250YWluZXJ9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbGliJztcblxuY29uc3QgdXNlUm91dGVUeXBlID0gKCk9PntcbiAgY29uc3QgdW5pdHMgPSB1c2VMb2NhdGlvbigpLnBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgcmV0dXJuIHVuaXRzW3VuaXRzLmxlbmd0aC0xXTtcbn1cblxuZnVuY3Rpb24gUHJvamVjdFNjcmVlbigpIHtcbiAgY29uc3Qgcm91dGVUeXBlID0gdXNlUm91dGVUeXBlKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyPlxuICAgICAgPEFzaWRlPlxuICAgICAgICA8TWVudSBtb2RlPXsnaW5saW5lJ30gIHNlbGVjdGVkS2V5cz17W3JvdXRlVHlwZV19PlxuICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PXsna2FuYmFuJ30+XG4gICAgICAgICAgPExpbmsgdG89J2thbmJhbic+55yL5p2/PC9MaW5rPlxuICAgICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PXsnZXBpYyd9PlxuICAgICAgICAgIDxMaW5rIHRvPSdlcGljJz7ku7vliqHnu4Q8L0xpbms+XG4gICAgICAgICAgPC9NZW51Lkl0ZW0+XG4gICAgICAgIDwvTWVudT5cbiAgICAgIFxuICAgICAgPC9Bc2lkZT5cbiAgICAgIFxuICAgICAgPE1haW4+XG4gICAgICA8Um91dGVzPlxuICAgICAgICA8Um91dGUgcGF0aD0nL2thbmJhbicgZWxlbWVudD17PEthbmJhblNjcmVlbi8+fS8+XG4gICAgICAgIDxSb3V0ZSBwYXRoPScvZXBpYycgZWxlbWVudD17PEVwaWNTY3JlZW4vPn0vPlxuICAgICAgICA8Um91dGUgcGF0aD1cIi8qXCIgZWxlbWVudD17PE5hdmlnYXRlIHRvPVwia2FuYmFuXCIgcmVwbGFjZT17dHJ1ZX0vPn0vPlxuICAgICAgPC9Sb3V0ZXM+XG4gICAgICA8L01haW4+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59XG5cbmNvbnN0IEFzaWRlID0gc3R5bGVkLmFzaWRlYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ0LCAyNDUsIDI0Nyk7XG4gIGRpc3BsYXk6IGZsZXg7XG5gO1xuXG5jb25zdCBNYWluID0gc3R5bGVkLmRpdmBcbiAgYm94LXNoYWRvdzogLTVweCAwIDVweCAtNXB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgZGlzcGxheTogZmxleDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTZyZW0gMWZyO1xuICB3aWR0aDogMTAwJTtcbmA7XG5cblxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdFNjcmVlbjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJhdGUgfSBmcm9tIFwiYW50ZFwiO1xuXG5pbnRlcmZhY2UgUGluUHJvcHMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgUmF0ZT4ge1xuICBjaGVja2VkOiBib29sZWFuO1xuICBvbkNoZWNrZWRDaGFuZ2U/OiAoY2hlY2tlZDogYm9vbGVhbikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IFBpbiA9ICh7IGNoZWNrZWQsIG9uQ2hlY2tlZENoYW5nZSwgLi4ucmVzdFByb3BzIH06IFBpblByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFJhdGVcbiAgICAgIGNvdW50PXsxfVxuICAgICAgdmFsdWU9e2NoZWNrZWQgPyAxIDogMH1cbiAgICAgIG9uQ2hhbmdlPXsobnVtKSA9PiBvbkNoZWNrZWRDaGFuZ2U/LighIW51bSl9XG4gICAgICB7Li4ucmVzdFByb3BzfVxuICAgIC8+XG4gICk7XG59OyIsImltcG9ydCB7IERyb3Bkb3duLCBNZW51LCBUYWJsZSwgVGFibGVQcm9wcyB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgZGF5anMgZnJvbSBcImRheWpzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBRdWVyeUNsaWVudCwgdXNlTXV0YXRpb24sIHVzZVF1ZXJ5LCB1c2VRdWVyeUNsaWVudCB9IGZyb20gXCJyZWFjdC1xdWVyeVwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBCdXR0b25Ob1BhZGRpbmcgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9saWJcIjtcbmltcG9ydCB7IFBpbiB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3BpblwiO1xuaW1wb3J0IHsgdXNlSHR0cCB9IGZyb20gXCIuLi8uLi91dGlscy9odHRwXCI7XG5pbXBvcnQgeyB1c2VBZGRQcm9qZWN0LCB1c2VFZGl0UHJvamVjdCwgdXNlRGVsZXRlUHJvamVjdCB9IGZyb20gXCIuLi8uLi91dGlscy9wcm9qZWN0XCI7XG5pbXBvcnQgeyB1c2VVcmxRdWVyeVBhcmFtIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3VybFwiO1xuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuLi8uLi90eXBlcy9wcm9qZWN0XCI7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL3VzZXJcIjtcbmltcG9ydCB7dXNlUHJvamVjdE1vZGFsLCB1c2VQcm9qZWN0c1F1ZXJ5S2V5fSBmcm9tIFwiLi91dGlsXCI7XG5leHBvcnQgaW50ZXJmYWNlIExpc3RQcm9wcyBleHRlbmRzIFRhYmxlUHJvcHM8UHJvamVjdD4ge1xuICB1c2VyczogVXNlcltdO1xufVxuZnVuY3Rpb24gTGlzdCh7IHVzZXJzLC4uLnByb3BzIH06IExpc3RQcm9wcykge1xuICAvLyBjb25zdCBbcGFyYW1dID0gdXNlVXJsUXVlcnlQYXJhbSgpXG4gIGNvbnN0IHsgbXV0YXRlIH0gPSB1c2VFZGl0UHJvamVjdCh1c2VQcm9qZWN0c1F1ZXJ5S2V5KCkpO1xuICBjb25zdCB7c3RhcnRFZGl0fSA9IHVzZVByb2plY3RNb2RhbCgpO1xuICBjb25zdCBwaW5Qcm9qZWN0ID0gKGlkOiBudW1iZXIpID0+IChwaW46IGJvb2xlYW4pID0+IHtcbiAgICBtdXRhdGUoeyBpZCwgcGluOiBwaW4gfSk7XG4gIH07XG4gIFxuICBcbiAgY29uc3Qge211dGF0ZTpzdGFydH0gPSB1c2VEZWxldGVQcm9qZWN0KHVzZVByb2plY3RzUXVlcnlLZXkoKSk7XG5cbiAgY29uc3QgZWRpdFByb2plY3QgPSAoaWQ6IG51bWJlcikgPT4gKCk9PiBzdGFydEVkaXQoaWQpOyBcbiAgY29uc3QgZGVsZXRlUHJvamVjdCA9IChpZDogbnVtYmVyKT0+ICgpPT4gc3RhcnQoU3RyaW5nKGlkKSk7XG4gIGNvbnN0IHtvcGVufT0gdXNlUHJvamVjdE1vZGFsKClcbiAgXG5cblxuICByZXR1cm4gKFxuICAgIDxUYWJsZVxuICAgICAgLy8gZGF0YVNvdXJjZT17cHJvcHMubGlzdH1cblxuICAgICAgey4uLnByb3BzfVxuICAgICAgY29sdW1ucz17W1xuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IDxQaW4gY2hlY2tlZD17dHJ1ZX0gZGlzYWJsZWQ9e3RydWV9IC8+LFxuICAgICAgICAgIHJlbmRlcih2YWx1ZSwgcHJvamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPFBpblxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3Byb2plY3QucGlufVxuICAgICAgICAgICAgICAgIG9uQ2hlY2tlZENoYW5nZT17cGluUHJvamVjdChwcm9qZWN0LmlkKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBcIuWQjeensFwiLFxuICAgICAgICAgIHNvcnRlcjogKGEsIGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSksXG4gICAgICAgICAgcmVuZGVyKHZhbHVlLCBwcm9qZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gPExpbmsgdG89e1N0cmluZyhwcm9qZWN0LmlkKX0+e3Byb2plY3QubmFtZX08L0xpbms+O1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG5cbiAgICAgICAgeyB0aXRsZTogXCLpg6jpl6hcIiwgZGF0YUluZGV4OiBcIm9yZ2FuaXphdGlvblwiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogXCLliJvlu7rml7bpl7RcIixcbiAgICAgICAgICByZW5kZXIodmFsdWUsIHByb2plY3QpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIHtwcm9qZWN0LmNyZWF0ZWRcbiAgICAgICAgICAgICAgICAgID8gZGF5anMocHJvamVjdC5jcmVhdGVkKS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpXG4gICAgICAgICAgICAgICAgICA6IFwi5pegXCJ9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcblxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IFwi6LSf6LSj5Lq6XCIsXG4gICAgICAgICAgcmVuZGVyKHZhbHVlLCBwcm9qZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICB7dXNlcnMuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gcHJvamVjdC5wZXJzb25JZCk/Lm5hbWUgfHxcbiAgICAgICAgICAgICAgICAgIFwi5pyq55+lXCJ9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJlbmRlcih2YWx1ZSwgcHJvamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPERyb3Bkb3duIG92ZXJsYXk9ezxNZW51PlxuICAgICAgICAgICAgICA8TWVudS5JdGVtICBrZXk9eydlZGl0J30gb25DbGljaz17ZWRpdFByb2plY3QocHJvamVjdC5pZCl9PiBcbiAgICAgICAgICAgICAgICAgIOe8lui+kVxuICAgICAgICAgICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgICAgICAgICAgIDxNZW51Lkl0ZW0ga2V5PXsnZGVsZXRlJ30gb25DbGljayA9IHtkZWxldGVQcm9qZWN0KHByb2plY3QuaWQpfT5cbiAgICAgICAgICAgICAgICAgIOWIoOmZpFxuICAgICAgICAgICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgICAgICAgICA8L01lbnU+fT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uTm9QYWRkaW5nIHR5cGU9e1wibGlua1wifT4uLi48L0J1dHRvbk5vUGFkZGluZz5cbiAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF19XG4gICAgPjwvVGFibGU+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpc3Q7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEZvcm0sIElucHV0LCBTZWxlY3QgfSBmcm9tIFwiYW50ZFwiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFVzZXJTZWxlY3QgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy91c2VyLXNlbGVjdFwiO1xuaW1wb3J0IHsgdXNlSHR0cCB9IGZyb20gXCIuLi8uLi91dGlscy9odHRwXCI7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uLy4uL3R5cGVzL3VzZXJcIjtcblxuaW50ZXJmYWNlIFNlYXJjaFBhbmVsUHJvcHMge1xuICB1c2VyczogVXNlcltdLFxuICBwYXJhbToge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBwZXJzb25JZDogc3RyaW5nLFxuICB9LFxuICBzZXRQYXJhbTogKHBhcmFtOiBTZWFyY2hQYW5lbFByb3BzW1wicGFyYW1cIl0pID0+IHZvaWQsXG59XG5jb25zdCBhcGlVcmwgPSBwcm9jZXNzLmVudi5SRUFDVF9BUFBfQVBJX1VSTDtcbmZ1bmN0aW9uIFNlYXJjaFBhbmVsKHsgcGFyYW0sIHNldFBhcmFtLCB1c2VycyB9OiBTZWFyY2hQYW5lbFByb3BzKSB7XG4gIC8vIGNvbnN0IHtwYXJhbX0gPSBwcm9wcztcbiAgY29uc3QgY2xpZW50ID0gdXNlSHR0cCgpO1xuICBsZXQgW2Nob29zZU5hbWUsIHNldENob29zZU5hbWVdID0gdXNlU3RhdGUoJycpO1xuICB1c2VFZmZlY3QoKCk9PntcbiAgICBpZih1c2Vycy5sZW5ndGggPiAwKXtcbiAgICAgIHNldENob29zZU5hbWUoIHVzZXJzLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT0gcGFyYW0ucGVyc29uSWQpPy5uYW1lIGFzIHN0cmluZyk7XG4gICAgfVxuICB9LCBbdXNlcnNdKVxuXG4gIGNvbnN0IEFTZWxlY3QgPSB1c2VNZW1vKCgpPT57XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gPFNlbGVjdFxuICAgICAgbGFiZWxJblZhbHVlXG4gICAgICAvLyBkZWZhdWx0VmFsdWU9e3sga2V5OiBwYXJhbS5wZXJzb25JZCwgdmFsdWU6IHBhcmFtLnBlcnNvbklkPyB1c2Vycy5maW5kKChpdGVtKSA9PiBpdGVtLmlkID09IHBhcmFtLnBlcnNvbklkKT8ubmFtZTogXCLotJ/otKPkurpcIn19XG4gICAgICBkZWZhdWx0VmFsdWU9e3t2YWx1ZTogY2hvb3NlTmFtZXx8ICfotJ/otKPkuronLGtleTogcGFyYW0ucGVyc29uSWR9fVxuICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT4ge1xuICAgICAgICBzZXRQYXJhbSh7IC4uLnBhcmFtLCBwZXJzb25JZDogdmFsdWUua2V5IH0pOyAgXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxTZWxlY3QuT3B0aW9uIHZhbHVlPVwiXCI+6LSf6LSj5Lq6PC9TZWxlY3QuT3B0aW9uPlxuICAgICAge3VzZXJzLm1hcCgodXNlcikgPT4gKFxuICAgICAgICA8U2VsZWN0Lk9wdGlvbiB2YWx1ZT17dXNlci5uYW1lfSBrZXk9e3VzZXIuaWR9PlxuICAgICAgICAgIHt1c2VyLm5hbWV9XG4gICAgICAgIDwvU2VsZWN0Lk9wdGlvbj5cbiAgICAgICkpfVxuICAgIDwvU2VsZWN0PiBcbiAgICB9XG4gIH0sIFtjaG9vc2VOYW1lXSlcbiAgcmV0dXJuIChcbiAgICA8Q29sRm9ybSAgYWN0aW9uPVwiXCIgPlxuICAgICAgICA8TklucHV0XG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCLpobnnm67lkI3np7BcIlxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICBzaXplPVwibWlkZGxlXCJcbiAgICAgICAgICAvLyBtYXhMZW5ndGg9ezIwfVxuICAgICAgICAgIHZhbHVlPXtwYXJhbS5uYW1lfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRQYXJhbSh7IC4uLnBhcmFtLCBuYW1lOiBldnQudGFyZ2V0LnZhbHVlIH0pfVxuICAgICAgICA+PC9OSW5wdXQ+XG4gICAgICAgIDxBU2VsZWN0Lz5cbiAgICAgICAgey8qIDxVc2VyU2VsZWN0IGRlZmF1bHRPcHRpb25OYW1lPXtcIui0n+i0o+S6ulwifSBvbkNoYW5nZT17KHZhbCkgPT4gc2V0UGFyYW0oeyAuLi5wYXJhbSwgcGVyc29uSWQ6IHZhbD09PXVuZGVmaW5lZD8gJyc6IFN0cmluZyh2YWwpIH0pfSAvPiAqL31cblxuICAgIDwvQ29sRm9ybT5cbiAgKTtcbn1cblxuZXhwb3J0ICBjb25zdCBDb2xGb3JtID0gc3R5bGVkKEZvcm0pYFxuICAvLyBkaXNwbGF5OiBmbGV4O1xuICAvLyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIC8vIG1hcmdpbi1sZWZ0OiAxdnc7XG4gIC8vIG1hcmdpbi1yaWdodDogMXZ3O1xuYFxuZXhwb3J0IGNvbnN0IE5JbnB1dCA9IHN0eWxlZChJbnB1dClgXG4gIHdpZHRoOiAzMHZ3O1xuICBtYXJnaW4tcmlnaHQ6IDJ2dzsgXG5gIFxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoUGFuZWw7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi9saXN0JztcbmltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi4vLi4vdHlwZXMvcHJvamVjdFwiO1xuaW1wb3J0IFNlYXJjaFBhbmVsIGZyb20gJy4vc2VhcmNoLXBhbmVsJztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICdxcyc7XG5pbXBvcnQgeyBjbGVhbk9iamVjdCwgdXNlRGVib3VuY2UsIHVzZURvY3VtZW50VGl0bGUsIHVzZU1vdW50IH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgdXNlSHR0cCB9IGZyb20gJy4uLy4uL3V0aWxzL2h0dHAnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgQnV0dG9uLCBUeXBvZ3JhcGh5IH0gZnJvbSAnYW50ZCc7XG5pbXBvcnQgeyB1c2VQcm9qZWN0cyB9IGZyb20gJy4uLy4uL3V0aWxzL3Byb2plY3QnO1xuaW1wb3J0IHsgdXNlVXNlcnMgfSBmcm9tICcuLi8uLi91dGlscy91c2VyJztcbmltcG9ydCB7IHVzZVVybFF1ZXJ5UGFyYW0gfSBmcm9tICcuLi8uLi91dGlscy91cmwnO1xuaW1wb3J0IHsgRXJyb3JCb3gsIFJvdyB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbGliJztcbmltcG9ydCB7IHVzZVByb2plY3RNb2RhbCB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IGFwaVVybCA9IHByb2Nlc3MuZW52LlJFQUNUX0FQUF9BUElfVVJMO1xuXG5cbmZ1bmN0aW9uIFByb2plY3RMaXN0KCkge1xuICBjb25zdCBjbGllbnQgPSB1c2VIdHRwKCk7XG4gIHVzZURvY3VtZW50VGl0bGUoJ+mhueebruWIl+ihqCcpXG4gIC8vIGNvbnN0IFtwYXJtLCBzZXRQYXJhbV0gPSB1c2VTdGF0ZSh7XG4gIC8vICAgbmFtZTogJycsXG4gIC8vICAgcGVyc29uSWQ6ICcnXG4gIC8vIH0pXG4gIGNvbnN0IFtwYXJhbSwgc2V0UGFyYW0gXSA9IHVzZVVybFF1ZXJ5UGFyYW0oWyduYW1lJywgJ3BlcnNvbklkJ10pIDtcbiAgY29uc3QgZGVib3VuY2VkUGFyYW0gPSB1c2VEZWJvdW5jZShwYXJhbSwgMjAwKTtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGVycm9yLCBkYXRhOiBsaXN0IH0gPSB1c2VQcm9qZWN0cyhkZWJvdW5jZWRQYXJhbSk7XG4gIGNvbnN0IHsgZGF0YTp1c2Vyc30gPSB1c2VVc2VycygpO1xuICBjb25zdCB7b3Blbn0gPSB1c2VQcm9qZWN0TW9kYWwoKTtcbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyID5cbiAgICAgIDxSb3cgYmV0d2Vlbj17dHJ1ZX0+XG4gICAgICA8aDE+6aG555uu5YiX6KGoPC9oMT5cbiAgICAgIDxCdXR0b24gb25DbGljaz17KCk9PntcbiAgICAgICAgb3BlbigpXG4gICAgICB9fT7liJvlu7rpobnnm648L0J1dHRvbj5cbiAgICAgIDwvUm93PlxuICAgICAgPEVycm9yQm94IGVycm9yPXtlcnJvcn0+PC9FcnJvckJveD5cbiAgICAgIDxTZWFyY2hQYW5lbCBwYXJhbT17cGFyYW19ICBzZXRQYXJhbT17c2V0UGFyYW19IHVzZXJzPXt1c2VycyB8fCBbXX0+PC9TZWFyY2hQYW5lbD5cbiAgICAgIDxMaXN0IHVzZXJzPXt1c2VycyB8fCBbXX0gZGF0YVNvdXJjZT17bGlzdCB8fCB1bmRlZmluZWR9ICAgbG9hZGluZz17aXNMb2FkaW5nfT48L0xpc3Q+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59XG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOjAgM3JlbSAwIDNyZW07XG4gIGZsZXg6IDFcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IFByb2plY3RMaXN0O1xuIiwiaW1wb3J0IHsgQnV0dG9uLCBEcmF3ZXIsIEZvcm0sIElucHV0LCBTcGluIH0gZnJvbSAnYW50ZCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUHJvamVjdE1vZGFsLCB1c2VQcm9qZWN0c1F1ZXJ5S2V5IH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCBmb3JtIGZyb20gJ2FudGQvbGliL2Zvcm0nO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2xpYic7XG5pbXBvcnQgeyBVc2VyU2VsZWN0IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy91c2VyLXNlbGVjdCc7XG5pbXBvcnQgeyB1c2VBZGRQcm9qZWN0LCB1c2VFZGl0UHJvamVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL3Byb2plY3QnO1xuaW1wb3J0IHsgdXNlRm9ybSB9IGZyb20gJ2FudGQvbGliL2Zvcm0vRm9ybSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5leHBvcnQgY29uc3QgUHJvamVjdE1vZGFsID0gKCkgPT4ge1xuICBjb25zdCB7IHByb2plY3RNb2RhbE9wZW46cHJvamVjdE1vZGFsT3BlbiwgY2xvc2UsIGVkaXRpbmdQcm9qZWN0LCBpc0xvYWRpbmcgfSA9XG4gICAgdXNlUHJvamVjdE1vZGFsKCk7XG4gIGNvbnN0IHVzZU11dGF0ZVByb2plY3QgPSBlZGl0aW5nUHJvamVjdCA/IHVzZUVkaXRQcm9qZWN0IDogdXNlQWRkUHJvamVjdDtcblxuICBjb25zdCB7XG4gICAgbXV0YXRlQXN5bmMsXG4gICAgZXJyb3IsXG4gICAgaXNMb2FkaW5nOiBtdXRhdGVMb2FkaW5nLFxuICB9ID0gdXNlTXV0YXRlUHJvamVjdCh1c2VQcm9qZWN0c1F1ZXJ5S2V5KCkpO1xuICBjb25zdCBbZm9ybV0gPSBGb3JtLnVzZUZvcm0oKTtcbiAgY29uc3Qgb25GaW5pc2ggPSAodmFsdWVzOiBhbnkpID0+IHtcbiAgICBjb25zb2xlLmxvZygnUmVjZWl2ZWQgdmFsdWVzIG9mIGZvcm06ICcsIHZhbHVlcyk7XG4gICAgbXV0YXRlQXN5bmMoeyAuLi5lZGl0aW5nUHJvamVjdCwgLi4udmFsdWVzIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgZm9ybS5yZXNldEZpZWxkcygpO1xuICAgICAgY2xvc2UoKTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgY2xvc2VNb2RhbCA9ICgpID0+IHtcbiAgICBmb3JtLnJlc2V0RmllbGRzKCk7XG4gICAgY2xvc2UoKTtcbiAgfTtcblxuICBjb25zdCB0aXRsZSA9IGVkaXRpbmdQcm9qZWN0ID8gXCLnvJbovpHpobnnm65cIiA6IFwi5Yib5bu66aG555uuXCI7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmb3JtLnNldEZpZWxkc1ZhbHVlKGVkaXRpbmdQcm9qZWN0KTtcbiAgfSwgW2VkaXRpbmdQcm9qZWN0LCBmb3JtXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RHJhd2VyXG4gICAgICBmb3JjZVJlbmRlcj17dHJ1ZX1cbiAgICAgIG9uQ2xvc2U9e2Nsb3NlTW9kYWx9XG4gICAgICB2aXNpYmxlPXtwcm9qZWN0TW9kYWxPcGVufVxuICAgICAgd2lkdGg9e1wiMTAwJVwifVxuICAgID5cbiAgICAgIDxDb250YWluZXI+XG4gICAgICAgIHtpc0xvYWRpbmcgPyAoXG4gICAgICAgICAgPFNwaW4gc2l6ZT17XCJsYXJnZVwifSAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8aDE+e3RpdGxlfTwvaDE+XG4gICAgICAgICAgICA8RXJyb3JCb3ggZXJyb3I9e2Vycm9yfSAvPlxuICAgICAgICAgICAgPEZvcm1cbiAgICAgICAgICAgICAgZm9ybT17Zm9ybX1cbiAgICAgICAgICAgICAgbGF5b3V0PXtcInZlcnRpY2FsXCJ9XG4gICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiBcIjQwcmVtXCIgfX1cbiAgICAgICAgICAgICAgb25GaW5pc2g9e29uRmluaXNofVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e1wi5ZCN56ewXCJ9XG4gICAgICAgICAgICAgICAgbmFtZT17XCJuYW1lXCJ9XG4gICAgICAgICAgICAgICAgcnVsZXM9e1t7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcIuivt+i+k+WFpemhueebruWQjVwiIH1dfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPXtcIuivt+i+k+WFpemhueebruWQjeensFwifSAvPlxuICAgICAgICAgICAgICA8L0Zvcm0uSXRlbT5cblxuICAgICAgICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e1wi6YOo6ZeoXCJ9XG4gICAgICAgICAgICAgICAgbmFtZT17XCJvcmdhbml6YXRpb25cIn1cbiAgICAgICAgICAgICAgICBydWxlcz17W3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwi6K+36L6T5YWl6YOo6Zeo5ZCNXCIgfV19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9e1wi6K+36L6T5YWl6YOo6Zeo5ZCNXCJ9IC8+XG4gICAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxuXG4gICAgICAgICAgICAgIDxGb3JtLkl0ZW0gbGFiZWw9e1wi6LSf6LSj5Lq6XCJ9IG5hbWU9e1wicGVyc29uSWRcIn0+XG4gICAgICAgICAgICAgICAgPFVzZXJTZWxlY3QgZGVmYXVsdE9wdGlvbk5hbWU9e1wi6LSf6LSj5Lq6XCJ9IC8+XG4gICAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxuXG4gICAgICAgICAgICAgIDxGb3JtLkl0ZW0gc3R5bGU9e3sgdGV4dEFsaWduOiBcInJpZ2h0XCIgfX0+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgbG9hZGluZz17bXV0YXRlTG9hZGluZ31cbiAgICAgICAgICAgICAgICAgIHR5cGU9e1wicHJpbWFyeVwifVxuICAgICAgICAgICAgICAgICAgaHRtbFR5cGU9e1wic3VibWl0XCJ9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAg5o+Q5LqkXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgICAgICAgPC9Gb3JtPlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgPC9Db250YWluZXI+XG4gICAgPC9EcmF3ZXI+XG4gICk7XG59O1xuXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDgwdmg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgQnV0dG9uLCBEcm9wZG93biwgTWVudSB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb3V0ZSwgUm91dGVzLCBOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFJvdyB9IGZyb20gXCIuL2NvbXBvbmVudHMvbGliXCI7XG5pbXBvcnQgUHJvamVjdFBvcG92ZXIgZnJvbSBcIi4vY29tcG9uZW50cy9wcm9qZWN0LXBvcG92ZXJcIjtcbmltcG9ydCBVc2VyUG9wb3ZlciBmcm9tIFwiLi9jb21wb25lbnRzL3VzZXItcG9wb3ZlclwiO1xuaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gXCIuL2NvbnRleHQvYXV0aC1jb250ZXh0XCI7XG5pbXBvcnQgUHJvamVjdFNjcmVlbiBmcm9tIFwiLi9zY3JlZW5zL3Byb2plY3RcIjtcbmltcG9ydCBQcm9qZWN0TGlzdCBmcm9tIFwiLi9zY3JlZW5zL3Byb2plY3QtbGlzdFwiO1xuaW1wb3J0IHtQcm9qZWN0TW9kYWx9IGZyb20gXCIuL3NjcmVlbnMvcHJvamVjdC1saXN0L3Byb2plY3QtbW9kYWxcIjtcbmltcG9ydCB7IHVzZVByb2plY3RNb2RhbCB9IGZyb20gXCIuL3NjcmVlbnMvcHJvamVjdC1saXN0L3V0aWxcIjtcbi8vIGltcG9ydCB7cmVhY3QtfVxuLyoqXG4gKlxuICogZ3JpZCDlkowgZmxleCDlkIToh6og55qE5bqU55So5Zy65pmvXG4gKiAxLuimgeiAg+iZke+8jOaYr+S4gOe7tOW4g+WxgCDov5jmmK8g5LqM57u05biD5bGAXG4gKiDkuIDoiKzmnaXor7TvvIzkuIDnu7TluIPlsYDnlKhmbGV477yM5LqM57u05biD5bGA55SoZ3JpZFxuICogMi7mmK/ku47lhoXlrrnlh7rlj5Hov5jmmK/ku47luIPlsYDlh7rlj5HvvJ9cbiAqIOS7juWGheWuueWHuuWPke+8muS9oOWFiOacieS4gOe7hOWGheWuue+8iOaVsOmHj+S4gOiIrOS4jeWbuuWumu+8ie+8jFxuICog54S25ZCO5biM5pyb5LuW5Lus5Z2H5YyA55qE5YiG5biD5Zyo5a655Zmo5Lit77yM55Sx5YaF5a656Ieq5bex55qE5aSn5bCP5Yaz5a6a5Y2g5o2u55qE56m66Ze0XG4gKiAzLuS7juW4g+WxgOWHuuWPke+8miDlhYjop4TliJLnvZHmoLzvvIjmlbDph4/kuIDoiKzmr5TovoPlm7rlrprvvInvvIznhLblkI7lho3miorlhYPntKDlvoDph4zloavlhYXjgIJcbiAqXG4gKiDku47lhoXlrrnlh7rlj5HvvIznlKhmbGV444CCXG4gKiDku47luIPlsYDlh7rlj5HvvIznlKhncmlk44CCXG4gKlxuICovXG5mdW5jdGlvbiBBdXRoZW50aWNhdGVkQXBwKCkge1xuICAvLyBjb25zdCBbcHJvamVjdE1vZGFsT3Blbiwgc2V0UHJvamVjdE1vZGFsT3Blbl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIHJldHVybiAoXG4gICAgPFJvdXRlcj5cbiAgICA8Q29udGFpbmVyPlxuICAgICAgICA8UGFnZUhlYWRlciAvPlxuICAgICAgICA8TWFpbj5cbiAgICAgICAgICA8Um91dGVzPlxuICAgICAgICAgICAgey8qIDxSb3V0ZSBwYXRoPVwiKlwiIGVsZW1lbnQ9ezxUZXN0PjwvVGVzdD59PjwvUm91dGU+ICovfVxuICAgICAgICAgICAgPFJvdXRlICBwYXRoPVwiL3Byb2plY3RzXCIgZWxlbWVudD17PFByb2plY3RMaXN0IC8+fSAvPlxuICAgICAgICAgICAgPFJvdXRlICBwYXRoPVwiL3Byb2plY3RzLzpwcm9qZWN0SWQvKlwiIGVsZW1lbnQ9ezxQcm9qZWN0U2NyZWVuIC8+fSAvPlxuICAgICAgICAgICAgPFJvdXRlICAgcGF0aD1cIipcIiBlbGVtZW50PXs8TmF2aWdhdGUgdG89XCJwcm9qZWN0c1wiIC8+fSAvPlxuICAgICAgICAgIDwvUm91dGVzPlxuICAgICAgICA8L01haW4+XG4gICAgICAgIDxQcm9qZWN0TW9kYWxcbiAgICAgICAgLz5cbiAgICA8L0NvbnRhaW5lcj5cbiAgICA8L1JvdXRlcj5cbiAgKTtcbn1cbmNvbnN0IFBhZ2VIZWFkZXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEhlYWRlciBiZXR3ZWVuPXt0cnVlfT5cbiAgICAgIDxIZWFkZXJMZWZ0IGdhcD17dHJ1ZX0+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICDkuLvpobVcbiAgICAgICAgICB7LyogPGltZyBzcmM9XCIvbG9nby5zdmdcIiBhbHQ9XCJsb2dvXCIgLz4gKi99XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8UHJvamVjdFBvcG92ZXIgLz5cbiAgICAgICAgPFVzZXJQb3BvdmVyPjwvVXNlclBvcG92ZXI+XG4gICAgICAgXG4gICAgICA8L0hlYWRlckxlZnQ+XG4gICAgICA8SGVhZGVyUmlnaHQ+XG4gICAgICAgIDxVc2VyIC8+XG4gICAgICA8L0hlYWRlclJpZ2h0PlxuICAgIDwvSGVhZGVyPlxuICApO1xufTtcbmNvbnN0IFVzZXIgPSAoKSA9PiB7XG4gIGNvbnN0IHsgbG9nb3V0LCB1c2VyIH0gPSB1c2VBdXRoKCk7XG4gIHJldHVybiAoXG4gICAgPERyb3Bkb3duXG4gICAgICBvdmVybGF5PXtcbiAgICAgICAgPE1lbnU+XG4gICAgICAgICAgPE1lbnUuSXRlbT5cbiAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cImxpbmtcIiBvbkNsaWNrPXtsb2dvdXR9PlxuICAgICAgICAgICAgICDpgIDlh7pcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgICA8L01lbnU+XG4gICAgICB9XG4gICAgPlxuICAgICAgPEJ1dHRvbiB0eXBlPVwibGlua1wiIG9uQ2xpY2s9eyhlKSA9PiBlLnByZXZlbnREZWZhdWx0KCl9PlxuICAgICAgICBIaSwge3VzZXI/Lm5hbWV9XG4gICAgICA8L0J1dHRvbj5cbiAgICA8L0Ryb3Bkb3duPlxuICApO1xufTtcblxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA2cmVtIDFmcjtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IEhlYWRlciA9IHN0eWxlZChSb3cpYFxuICBwYWRkaW5nOiAwIDNyZW0gMCAzcmVtO1xuICBib3gtc2hhZG93OiAwIDAgNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB6LWluZGV4OiAxO1xuYDtcblxuY29uc3QgSGVhZGVyTGVmdCA9IHN0eWxlZChSb3cpYGA7XG5jb25zdCBIZWFkZXJSaWdodCA9IHN0eWxlZC5kaXZgYDtcbmNvbnN0IE1haW4gPSBzdHlsZWQubWFpbmBcbiAgZGlzcGxheTogZmxleDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5leHBvcnQgZGVmYXVsdCBBdXRoZW50aWNhdGVkQXBwO1xuIiwiaW1wb3J0IHsgQnV0dG9uLCBGb3JtLCBJbnB1dCB9IGZyb20gJ2FudGQnO1xuaW1wb3J0IFJlYWN0LCB7IEZvcm1FdmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUF1dGggfSBmcm9tICcuLi9jb250ZXh0L2F1dGgtY29udGV4dCc7XG5pbXBvcnQgJ2FudGQvZGlzdC9hbnRkLmxlc3MnO1xuaW1wb3J0IHsgTG9uZ0J1dHRvbiB9IGZyb20gJy4nO1xuaW1wb3J0IHsgdXNlQXN5bmMgfSBmcm9tICcuLi91dGlscy91c2UtYXN5bmMnO1xuY29uc3QgYXBpVXJsID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0FQSV9VUkw7XG5cblxuZXhwb3J0IGNvbnN0IExvZ2luU2NyZWVuID0gKHBhcmFtOiB7dXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZ30pID0+e1xuICByZXR1cm4gZmV0Y2goYCR7YXBpVXJsfS9sb2dpbmAsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbSlcbiAgfSkudGhlbihcbiAgICBhc3luYyAocmVzcG9uc2U6IFJlc3BvbnNlKSA9PntcbiAgICAgIGlmKHJlc3BvbnNlLm9rKXtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIHRva2VuKTtcbiAgICAgIH1cbiAgICB9XG4gIClcbn1cbmZ1bmN0aW9uIExvZ2luKHtvbkVycm9yfToge29uRXJyb3I6IChlcnJvcjogRXJyb3IgfCBudWxsKSA9PiB2b2lkfSkge1xuXG4gIGNvbnN0IHtsb2dpbiwgdXNlcn0gPSB1c2VBdXRoKCk7XG4gIGNvbnN0IHtydW4sIGlzTG9hZGluZ30gPSB1c2VBc3luYygpO1xuICBjb25zdCAgaGFuZGxlU3VibWl0PSh2YWx1ZXM6IHt1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nfSkgPT57ICAgXG4gICAgb25FcnJvcihudWxsKTsgXG4gICAgcnVuKGxvZ2luKHZhbHVlcykuY2F0Y2gob25FcnJvcikpO1xuICB9XG4gIHJldHVybiAoXG4gICAgPEZvcm0gb25GaW5pc2g9e2hhbmRsZVN1Ym1pdH0+XG4gICAgICA8Rm9ybS5JdGVtIG5hbWU9XCJ1c2VybmFtZVwiIHJ1bGVzPXtbe3JlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+36L6T5YWl55So5oi35ZCNJ31dfSA+XG4gICAgICAgIHsvKiA8bGFiZWwgaHRtbEZvcj0ndXNlcm5hbWUnPueUqOaIt+WQjTwvbGFiZWw+ICovfVxuICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9eyfnlKjmiLflkI0nfSB0eXBlPVwidGV4dFwiIGlkPVwidXNlcm5hbWVcIi8+XG4gICAgICA8L0Zvcm0uSXRlbT5cbiAgICAgIDxGb3JtLkl0ZW0gbmFtZT1cInBhc3N3b3JkXCIgcnVsZXM9e1t7cmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fovpPlhaXnlKjmiLflkI0nfV19PlxuICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9J+WvhueggScgaWQ9XCJwYXNzd29yZFwiLz5cbiAgICAgIDwvRm9ybS5JdGVtID5cbiAgICAgIDxMb25nQnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgaHRtbFR5cGU9J3N1Ym1pdCcgbG9hZGluZz17aXNMb2FkaW5nfT4g55m75b2VPC9Mb25nQnV0dG9uPlxuICAgIDwvRm9ybT5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9naW47XG4iLCJpbXBvcnQgeyBCdXR0b24sIEZvcm0sIElucHV0IH0gZnJvbSAnYW50ZCc7XG5pbXBvcnQgUmVhY3QsIHsgRm9ybUV2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTG9uZ0J1dHRvbiB9IGZyb20gJy4nO1xuaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gJy4uL2NvbnRleHQvYXV0aC1jb250ZXh0JztcbmltcG9ydCB7IHVzZUFzeW5jIH0gZnJvbSAnLi4vdXRpbHMvdXNlLWFzeW5jJztcblxuY29uc3QgYXBpVXJsID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0FQSV9VUkw7XG5leHBvcnQgY29uc3QgUmVnaXN0ZXJTY3JlZW4gPSAocGFyYW06IHt1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nfSkgPT57XG4gIHJldHVybiBmZXRjaChgJHthcGlVcmx9L2xvZ2luYCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtKVxuICB9KS50aGVuKFxuICAgIGFzeW5jIChyZXNwb25zZTogUmVzcG9uc2UpID0+e1xuICAgICAgaWYocmVzcG9uc2Uub2spe1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgdG9rZW4pO1xuICAgICAgfVxuICAgIH1cbiAgKVxufVxuZnVuY3Rpb24gUmVnaXN0ZXIoe29uRXJyb3J9OiB7b25FcnJvcjogKGVycm9yOiBFcnJvcnwgbnVsbCk9PiB2b2lkfSkge1xuICBjb25zdCB7IHJ1biwgaXNMb2FkaW5nIH0gPSB1c2VBc3luYygpO1xuICBjb25zdCB7cmVnaXN0ZXIsIHVzZXJ9ID0gdXNlQXV0aCgpO1xuICBjb25zdCAgaGFuZGxlU3VibWl0PSh7Y3Bhc3N3b3JkICwgLi4udmFsdWVzfToge2NwYXNzd29yZDogc3RyaW5nLHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmd9KSA9PntcbiAgICBvbkVycm9yKG51bGwpO1xuICAgIGlmKGNwYXNzd29yZCAhPT0gdmFsdWVzLnBhc3N3b3JkKXtcbiAgICAgIG9uRXJyb3IobmV3IEVycm9yKCfkuKTmrKHovpPlhaXnmoTlr4bnoIHkuI3kuIDoh7QnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJ1bihyZWdpc3Rlcih2YWx1ZXMpLmNhdGNoKChlcnIpPT57XG4gICAgICBvbkVycm9yKGVycik7XG4gICAgfSkpO1xuICAgIFxuICB9XG4gIHJldHVybiAoXG4gICAgPEZvcm0gb25GaW5pc2g9e2hhbmRsZVN1Ym1pdH0+XG4gICAgICA8Rm9ybS5JdGVtIG5hbWU9eyd1c2VybmFtZSd9IHJ1bGVzPXtbe3JlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+36L6T5YWl55So5oi35ZCNJ31dfSA+XG4gICAgICAgIHsvKiA8bGFiZWwgaHRtbEZvcj0ndXNlcm5hbWUnPueUqOaIt+WQjTwvbGFiZWw+ICovfVxuICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9eyfnlKjmiLflkI0nfSB0eXBlPVwidGV4dFwiIGlkPVwidXNlcm5hbWVcIi8+XG4gICAgICA8L0Zvcm0uSXRlbT5cbiAgICAgIDxGb3JtLkl0ZW0gbmFtZT17J3Bhc3N3b3JkJ30gcnVsZXM9e1t7cmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fovpPlhaXlr4bnoIEnfV19PlxuICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9J+WvhueggScgaWQ9XCJwYXNzd29yZFwiLz5cbiAgICAgIDwvRm9ybS5JdGVtID5cbiAgICAgIDxGb3JtLkl0ZW0gbmFtZT17J2NwYXNzd29yZCd9IHJ1bGVzPXtbe3JlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+356Gu6K6k5a+G56CBJ31dfT5cbiAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPSflr4bnoIEnIGlkPVwiY3Bhc3N3b3JkXCIvPlxuICAgICAgPC9Gb3JtLkl0ZW0gPlxuICAgICAgPExvbmdCdXR0b24gdHlwZT1cInByaW1hcnlcIiBodG1sVHlwZT0nc3VibWl0JyBsb2FkaW5nPXtpc0xvYWRpbmd9PiDms6jlhow8L0xvbmdCdXR0b24+XG4gICAgPC9Gb3JtPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWdpc3RlcjtcbiIsImV4cG9ydCBkZWZhdWx0IFwiX19WSVRFX0FTU0VUX19hYTM1YzExMV9fXCIiLCJleHBvcnQgZGVmYXVsdCBcIl9fVklURV9BU1NFVF9fNTRkZGY5MTFfX1wiIiwiZXhwb3J0IGRlZmF1bHQgXCJfX1ZJVEVfQVNTRVRfXzQ3MjQ1YzFhX19cIiIsImltcG9ydCB7IEJ1dHRvbiwgQ2FyZCwgRGl2aWRlciwgVHlwb2dyYXBoeSB9IGZyb20gJ2FudGQnO1xuLy8gaW1wb3J0IHsgbG9hZERldlRvb2xzIH0gZnJvbSAnamlyYS1kZXYtdG9vbCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi9sb2dpbic7XG5pbXBvcnQgUmVnaXN0ZXIgZnJvbSAnLi9yZWdpc3Rlcic7XG4vLyBpbXBvcnQgbG9nbyBmcm9tIFwiIC4vLi4vYXNzZXRzL2xvZ28uc3ZnXCI7XG5pbXBvcnQgbG9nbyBmcm9tICcuLy4uL2Fzc2V0cy9sb2dvLnN2Zydcbi8vIGltcG9ydCBsZWZ0IGZyb20gXCIuLy4uL2Fzc2V0cy9sZWZ0LnN2Z1wiO1xuaW1wb3J0IGxlZnQgZnJvbSAnLi8uLi9hc3NldHMvbGVmdC5zdmcnXG4vLyBpbXBvcnQgcmlnaHQgZnJvbSBcIi4vLi4vYXNzZXRzL3JpZ2h0LnN2Z1wiO1xuaW1wb3J0IHJpZ2h0IGZyb20gICcuLy4uL2Fzc2V0cy9yaWdodC5zdmcnXG5pbXBvcnQgc3R5bGVkICBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tICcuLi9jb21wb25lbnRzL2xpYic7XG5pbXBvcnQgeyB1c2VEb2N1bWVudFRpdGxlIH0gZnJvbSAnLi4vdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVW5hdXRoZW50aWNhdGVkQXBwKCkge1xuICBjb25zdCBbaXNSZWdpc3Rlciwgc2V0SXNSZWdpc3Rlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8RXJyb3IgfCBudWxsPihudWxsKTtcblxuICB1c2VEb2N1bWVudFRpdGxlKFwi6K+355m75b2V5rOo5YaM5Lul57un57utXCIpO1xuXG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxIZWFkZXIgLz5cbiAgICAgIDxCYWNrZ3JvdW5kIC8+XG4gICAgICA8U2hhZG93Q2FyZD5cbiAgICAgICAgPFRpdGxlPntpc1JlZ2lzdGVyID8gXCLor7fms6jlhoxcIiA6IFwi6K+355m75b2VXCJ9PC9UaXRsZT5cbiAgICAgICAgPEVycm9yQm94IGVycm9yPXtlcnJvcn0gLz5cbiAgICAgICAge2lzUmVnaXN0ZXIgPyAoXG4gICAgICAgICAgPFJlZ2lzdGVyIG9uRXJyb3I9e3NldEVycm9yfSAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxMb2dpbiBvbkVycm9yPXtzZXRFcnJvcn0gLz5cbiAgICAgICAgKX1cbiAgICAgICAgPERpdmlkZXIgLz5cbiAgICAgICAgPEJ1dHRvbiB0eXBlPXtcImxpbmtcIn0gb25DbGljaz17KCkgPT4gc2V0SXNSZWdpc3RlcighaXNSZWdpc3Rlcil9PlxuICAgICAgICAgIHtpc1JlZ2lzdGVyID8gXCLlt7Lnu4/mnInotKblj7fkuobvvJ/nm7TmjqXnmbvlvZVcIiA6IFwi5rKh5pyJ6LSm5Y+377yf5rOo5YaM5paw6LSm5Y+3XCJ9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9TaGFkb3dDYXJkPlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufVxuXG5leHBvcnQgY29uc3QgTG9uZ0J1dHRvbiA9IHN0eWxlZChCdXR0b24pYFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAyLjRyZW07XG4gIGNvbG9yOiByZ2IoOTQsIDEwOCwgMTMyKTtcbmA7XG5cbmNvbnN0IEJhY2tncm91bmQgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtYXR0YWNobWVudDogZml4ZWQ7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGxlZnQgYm90dG9tLCByaWdodCBib3R0b207XG4gIGJhY2tncm91bmQtc2l6ZTogY2FsYygoKDEwMHZ3IC0gNDByZW0pIC8gMikgLSAzLjJyZW0pLFxuICAgIGNhbGMoKCgxMDB2dyAtIDQwcmVtKSAvIDIpIC0gMy4ycmVtKSwgY292ZXI7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2xlZnR9KSwgdXJsKCR7cmlnaHR9KTtcbmA7XG5cbmNvbnN0IEhlYWRlciA9IHN0eWxlZC5oZWFkZXJgXG4gIGJhY2tncm91bmQ6IHVybCgke2xvZ299KSBuby1yZXBlYXQgY2VudGVyO1xuICBwYWRkaW5nOiA1cmVtIDA7XG4gIGJhY2tncm91bmQtc2l6ZTogOHJlbTtcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5jb25zdCBTaGFkb3dDYXJkID0gc3R5bGVkKENhcmQpYFxuICB3aWR0aDogNDByZW07XG4gIG1pbi1oZWlnaHQ6IDU2cmVtO1xuICBwYWRkaW5nOiAzLjJyZW0gNHJlbTtcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMSkgMCAwIDEwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbmA7XG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuYDtcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgRmFsbGJhY2tSZW5kZXIgPSAocHJvcHM6IHtlcnJvcjogRXJyb3J8IG51bGx9KSA9PiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4vLyBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7ZmFsbGJhY2tSZW5kZXI6IEZhbGxiYWNrUmVuZGVyfT5cbmV4cG9ydCBjbGFzcyBFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHtjaGlsZHJlbjogUmVhY3ROb2RlLCBmYWxsYmFja1JlbmRlcjogRmFsbGJhY2tSZW5kZXIgfSwge2Vycm9yOkVycm9yfCBudWxsfT57XG4gIHN0YXRlID0ge2Vycm9yOiBudWxsfTtcblxuICAvLyDlvZPlrZDnu4Tku7bmipvlh7rlvILluLjvvIzov5nph4zkvJrmjqXmlLbliLDlubbosIPnlKhcbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcjogRXJyb3Ipe1xuICAgIHJldHVybiB7ZXJyb3J9XG4gIH1cblxuICByZW5kZXIoKXtcbiAgICBjb25zdCB7ZXJyb3J9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7ZmFsbGJhY2tSZW5kZXIsIGNoaWxkcmVufSA9IHRoaXMucHJvcHM7XG4gICAgaWYoZXJyb3Ipe1xuICAgICAgcmV0dXJuIGZhbGxiYWNrUmVuZGVyKHtlcnJvcn0pXG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxufSIsImltcG9ydCBSZWFjdCx7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG4vLyBpbXBvcnQgJy4vQXBwLm1vZHVsZS5jc3MnXG5pbXBvcnQgQXV0aGVudGljYXRlZEFwcCBmcm9tICcuL2F1dGhlbnRpY2F0ZWQtYXBwJztcbmltcG9ydCB7IHVzZUF1dGggfSBmcm9tICcuL2NvbnRleHQvYXV0aC1jb250ZXh0JztcblxuaW1wb3J0IFByb2plY3RMaXN0ICBmcm9tICcuL3NjcmVlbnMvcHJvamVjdC1saXN0L2luZGV4LmpzeCc7XG5cblxuaW1wb3J0IFVuYXV0aGVudGljYXRlZEFwcCBmcm9tICcuL3VuYXV0aGVudGljYXRlZC1hcHAnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnYW50ZCc7XG5pbXBvcnQgJ2FudGQvZGlzdC9hbnRkLmxlc3MnXG5pbXBvcnQgeyBFcnJvckJvdW5kYXJ5IH0gZnJvbSAnLi9jb21wb25lbnRzL2Vycm9yLWJvdW5kYXJ5JztcbmltcG9ydCB7IEZ1bGxQYWdlRXJyb3JGYWxsYmFjayB9IGZyb20gJy4vY29tcG9uZW50cy9saWInO1xuZnVuY3Rpb24gQXBwKCkge1xuICBjb25zdCB7dXNlcn0gPSB1c2VBdXRoKCk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGVycm9yKT0+e1xuICAgIC8vIGFsZXJ0KCdlcnJvcicpO1xuICAgIGFsZXJ0KGVycm9yKVxuICB9KVxuICAvLyB3aW5kb3cub25lcnJvciA9IGZ1bmN0aW9uKCl7XG4gIC8vICAgYWxlcnQoJ3Rlc3QnKVxuICAvLyB9XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJBcHBcIj5cbiAgICAgIDxFcnJvckJvdW5kYXJ5IGZhbGxiYWNrUmVuZGVyPXtGdWxsUGFnZUVycm9yRmFsbGJhY2t9PlxuICAgICAge3VzZXI/IDxBdXRoZW50aWNhdGVkQXBwLz46PFVuYXV0aGVudGljYXRlZEFwcC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUXVlcnlDbGllbnQsIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcXVlcnlcIjtcbmltcG9ydCB7IEF1dGhQcm92aWRlciB9IGZyb20gXCIuL2F1dGgtY29udGV4dFwiO1xuZnVuY3Rpb24gQXBwUHJvdmlkZXJzKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e25ldyBRdWVyeUNsaWVudCgpfT5cbiAgICAgIDxBdXRoUHJvdmlkZXI+e2NoaWxkcmVufTwvQXV0aFByb3ZpZGVyPlxuICAgIDwvUXVlcnlDbGllbnRQcm92aWRlcj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwUHJvdmlkZXJzO1xuIiwiaW1wb3J0IHsgRGV2VG9vbHMsIGxvYWRTZXJ2ZXJ9IGZyb20gJ2ppcmEtZGV2LXRvb2wnO1xuLy8gaW1wb3J0IHsgbG9hZERldlRvb2xzIH0gZnJvbSAnamlyYS1kZXYtdG9vbCc7XG5cbi8vIGltcG9ydCB7IERldlRvb2xzLCBsb2FkU2VydmVyIH0gZnJvbSAnamlyYS1kZXYtdG9vbCdcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJ1xuaW1wb3J0IEFwcFByb3ZpZGVycyBmcm9tICcuL2NvbnRleHQnXG5cbi8vIGltcG9ydCBcImFudGQvZGlzdC9hbnRkLmxlc3NcIjtcbi8vIGltcG9ydCB7IERldlRvb2xzIH0gZnJvbSAnamlyYS1kZXYtdG9vbCc7XG4vLyBpbXBvcnQgeyBsb2FkU2VydmVyIH0gZnJvbSAnamlyYS1kZXYtdG9vbCc7XG5cblxuLy8gbG9hZERldlRvb2xzKCgpPT57XG4vLyAgICAgUmVhY3RET00ucmVuZGVyKFxuLy8gICAgIDxSZWFjdC5TdHJpY3RNb2RlPlxuLy8gICAgICAgPEFwcFByb3ZpZGVycz5cbi8vICAgICAgXG4vLyAgICAgICAgIDxBcHA+PC9BcHA+XG4vLyAgICAgICA8L0FwcFByb3ZpZGVycz5cbi8vICAgICA8L1JlYWN0LlN0cmljdE1vZGU+LFxuLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jylcbi8vICAgKVxuLy8gfSlcbmxvYWRTZXJ2ZXIoKCkgPT57XG4gIFJlYWN0RE9NLnJlbmRlcihcbiAgICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICAgIDxBcHBQcm92aWRlcnM+XG4gICAgICAgIDxEZXZUb29scy8+XG4gICAgICAgIDxBcHA+PC9BcHA+XG4gICAgICA8L0FwcFByb3ZpZGVycz5cbiAgICA8L1JlYWN0LlN0cmljdE1vZGU+LFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JylcbiAgKVxufSlcbiJdLCJuYW1lcyI6WyJzdHlsZWQiLCJhcGlVcmwiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZVJlZiIsInVzZUNhbGxiYWNrIiwidXNlUmVkdWNlciIsImF1dGguZ2V0VG9rZW4iLCJsb2dpbiIsImF1dGgubG9naW4iLCJyZWdpc3RlciIsImF1dGgucmVnaXN0ZXIiLCJsb2dvdXQiLCJhdXRoLmxvZ291dCIsInN0cmluZ2lmeSIsInVzZU1lbW8iLCJMaXN0IiwiQ29udGFpbmVyIiwiRHJvcHBhYmxlIiwiRHJhZ2dhYmxlIiwiU2VhcmNoUGFuZWwiLCJ1c2VGb3JtIiwiTWFpbiIsIlJvdXRlciIsIkhlYWRlciJdLCJtYXBwaW5ncyI6Inc5QkFBQSxLQUFNLElBQUksVUFBb0IsQ0FDMUIsS0FBTSxHQUFVLFNBQVMsY0FBYyxNQUFNLEVBQUUsUUFDL0MsR0FBSSxHQUFXLEVBQVEsVUFBWSxFQUFRLFNBQVMsZUFBZSxFQUMvRCxPQUVKLFNBQVcsS0FBUSxVQUFTLGlCQUFpQiwyQkFBMkIsRUFDcEUsRUFBZSxDQUFJLEVBRXZCLEdBQUksa0JBQWlCLEFBQUMsR0FBYyxDQUNoQyxTQUFXLEtBQVksR0FDbkIsR0FBSSxFQUFTLE9BQVMsWUFHdEIsU0FBVyxLQUFRLEdBQVMsV0FDeEIsQUFBSSxFQUFLLFVBQVksUUFBVSxFQUFLLE1BQVEsaUJBQ3hDLEVBQWUsQ0FBSSxDQUd2QyxDQUFLLEVBQUUsUUFBUSxTQUFVLENBQUUsVUFBVyxHQUFNLFFBQVMsRUFBSSxDQUFFLEVBQ3ZELFdBQXNCLEVBQVEsQ0FDMUIsS0FBTSxHQUFZLENBQUEsRUFDbEIsTUFBSSxHQUFPLFdBQ1AsR0FBVSxVQUFZLEVBQU8sV0FDN0IsRUFBTyxnQkFDUCxHQUFVLGVBQWlCLEVBQU8sZ0JBQ3RDLEFBQUksRUFBTyxjQUFnQixrQkFDdkIsRUFBVSxZQUFjLFVBQ3ZCLEFBQUksRUFBTyxjQUFnQixZQUM1QixFQUFVLFlBQWMsT0FFeEIsRUFBVSxZQUFjLGNBQ3JCLENBQ1YsQ0FDRCxXQUF3QixFQUFNLENBQzFCLEdBQUksRUFBSyxHQUVMLE9BQ0osRUFBSyxHQUFLLEdBRVYsS0FBTSxHQUFZLEVBQWEsQ0FBSSxFQUNuQyxNQUFNLEVBQUssS0FBTSxDQUFTLENBQzdCLENBQ0wsRUFBRSxBQUFvQixHQUFHLEVDNUJsQixLQUFNLEdBQU1BLEVBQU87QUFBQTtBQUFBO0FBQUEsbUJBT04sQUFB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
