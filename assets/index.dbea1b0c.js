var B=Object.defineProperty;var y=Object.getOwnPropertySymbols;var x=Object.prototype.hasOwnProperty,b=Object.prototype.propertyIsEnumerable;var w=(e,t,r)=>t in e?B(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,g=(e,t)=>{for(var r in t||(t={}))x.call(t,r)&&w(e,r,t[r]);if(y)for(var r of y(t))b.call(t,r)&&w(e,r,t[r]);return e};var A=(e,t)=>{var r={};for(var s in e)x.call(e,s)&&t.indexOf(s)<0&&(r[s]=e[s]);if(e!=null&&y)for(var s of y(e))t.indexOf(s)<0&&b.call(e,s)&&(r[s]=e[s]);return r};import{l as $,r as m,n as h,B as I,R as a,S as L,D as S,T as k,u as O,Q as U,a as C,b as F,c as D}from"./vendor.078d3364.js";const N=function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const c of o.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&s(c)}).observe(document,{childList:!0,subtree:!0});function r(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerpolicy&&(o.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?o.credentials="include":n.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(n){if(n.ep)return;n.ep=!0;const o=r(n);fetch(n.href,o)}};N();const P="__auth_provider_token__",M=()=>window.localStorage.getItem(P),_=({user:e})=>(window.localStorage.setItem(P,e.token||""),e),R="http://localhost:3001",Q=e=>fetch(`${R}/login`,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(e)}).then(async t=>t.ok?_(await t.json()):Promise.reject(await t.json())),J=e=>fetch(`${R}/register`,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(e)}).then(async t=>t.ok?_(await t.json()):Promise.reject(await t.json())),j=async()=>{window.localStorage.removeItem(P)},q="http://localhost:3001",z=async(e,o={})=>{var c=o,{data:t,token:r,headers:s}=c,n=A(c,["data","token","headers"]);const i=g({method:"GET",headers:{Authorization:r?`Bearer ${r}`:"","Content-Type":"application/json"}},n);return i.method.toUpperCase()==="GET"?e+=`?${$.stringify(t)}`:i.body=JSON.stringify(t||{}),window.fetch(`${q}/${e}`,i).then(async d=>{if(d.status===401)return await j(),window.location.reload(),Promise.reject({message:"\u8BF7\u91CD\u65B0\u767B\u5F55"});const l=await d.json();return d!=null&&d.ok?l:Promise.reject(l)})},G=e=>{m.exports.useEffect(()=>{e()},[])},K=()=>{const e=m.exports.useRef(!1);return m.exports.useEffect(()=>(e.current=!0,()=>{e.current=!1}),[]),e},H={error:null,data:null,stat:"idle"},V=e=>{const t=K();return m.exports.useCallback((...r)=>t.current?e(...r):void 0,[t,e])},W=e=>{const[t,r]=m.exports.useReducer((l,u)=>g(g({},l),u),g(g({},H),e)),[s,n]=m.exports.useState(()=>()=>{}),o=V(r),c=m.exports.useCallback(l=>{o({error:null,data:l,stat:"success"})},[o]),i=m.exports.useCallback(l=>{o({error:l,stat:"error",data:null})},[o]),d=m.exports.useCallback((l,u)=>{if(!l||!l.then)throw new Error("\u8BF7\u4F20\u5165 Promise \u7C7B\u578B\u6570\u636E ");return n(()=>()=>{u!=null&&u.retry&&d(u==null?void 0:u.retry(),u)}),o({stat:"loading",data:null,error:null}),l.then(f=>(c(f),f)).catch(f=>(i(f),Promise.reject(f)))},[c,i,o]);return g({isIdle:t.stat==="idle",isLoading:t.stat==="loading",isError:t.stat==="error",isSuccess:t.stat==="success",run:d,setData:c,setError:i,retry:s},t)};h.div`
display: flex;
align-items: center;
justify-content: ${e=>e.between?"space-between":void 0};
> * {
  margin-top: 0 !important;
  margin-bottom: ${e=>typeof e.marginBottom=="number"?e.marginBottom+"rem":0} ;
  margin-right: ${e=>typeof e.gap=="number"?e.gap+"rem":e.gap?"2rem":"0"}
}`;const v=h.div`
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;

`,X=()=>a.createElement(v,null,a.createElement(L,{size:"large"})),Y=({error:e})=>a.createElement(v,null,a.createElement(ee,{error:e}),a.createElement(S,null));h(I)`
  padding: 0px;
`;const Z=e=>e==null?void 0:e.message,ee=function({error:e}){return Z(e)?a.createElement(k.Text,{type:"danger"},e.message):null};h.div`
  padding: 3.2rem;
  width: 100%;
  display: flex;
  flex-direction: column; 
`;const te=async()=>{let e=null;const t=M();return t&&(e=(await z("me",{token:t})).user),e},T=a.createContext(void 0);T.displayName="AuthContext";const re=({children:e})=>{const t=O(),{isLoading:r,isError:s,run:n,isIdle:o,data:c,setData:i,error:d}=W();if(G(()=>{n(te())}),o||r)return a.createElement(X,null);if(s)return a.createElement(Y,{error:d});const l=p=>Q(p).then(E=>{i(E)}),u=p=>J(p).then(E=>i(E)),f=()=>j().then(()=>{i(null),t.clear()});return a.createElement(T.Provider,{value:{user:c,login:l,register:u,logout:f}},e)};function ne({children:e}){return a.createElement(U,{client:new C},a.createElement(re,null,e))}F(()=>{D.render(a.createElement(a.StrictMode,null,a.createElement(ne,null,a.createElement(S,null))),document.getElementById("root"))});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
